//Generated by Enki v1.2



version(build) pragma(export_version,EnkiUTF8);

debug private import std.stdio;
private import enki.types;
private import enki.BaseParser;
private import enki.types;
private import enki.IParser;
private import compiler;
private import std.conv;



class Parser : BaseParser{

	/*
	
Newline
	::= #0A | #0D;

	*/
	public ResultT!(bool) parse_Newline(){
		debug writefln("parse_Newline()");
		uint start1 = position;
		//no declarations
		
		
		{//Expression
			uint start2 = position;
			if((terminal(cast(ubyte)0x0A).success) || (terminal(cast(ubyte)0x0D).success)){
				clearErrors();
				goto match1;
			}else{
				position = start2;
				goto mismatch2;
			}
		}
	match1:
		debug writefln("parse_Newline() PASS");
		return ResultT!(bool)(true);
	mismatch2:
		position = start1;
		return ResultT!(bool)();
	}

	/*
	
Tab
	::= #09;

	*/
	public ResultT!(bool) parse_Tab(){
		debug writefln("parse_Tab()");
		uint start3 = position;
		//no declarations
		
		
		{//Expression
			uint start4 = position;
			if((terminal(cast(ubyte)0x09).success)){
				clearErrors();
				goto match3;
			}else{
				position = start4;
				goto mismatch4;
			}
		}
	match3:
		debug writefln("parse_Tab() PASS");
		return ResultT!(bool)(true);
	mismatch4:
		position = start3;
		return ResultT!(bool)();
	}

	/*
	
Space
	::= #20;

	*/
	public ResultT!(bool) parse_Space(){
		debug writefln("parse_Space()");
		uint start5 = position;
		//no declarations
		
		
		{//Expression
			uint start6 = position;
			if((terminal(cast(ubyte)0x20).success)){
				clearErrors();
				goto match5;
			}else{
				position = start6;
				goto mismatch6;
			}
		}
	match5:
		debug writefln("parse_Space() PASS");
		return ResultT!(bool)(true);
	mismatch6:
		position = start5;
		return ResultT!(bool)();
	}

	/*
	
WS
	::= (  Space |  Tab) {  WS};

	*/
	public ResultT!(bool) parse_WS(){
		debug writefln("parse_WS()");
		uint start7 = position;
		//no declarations
		
		
		{//Expression
			uint start8 = position;
			{//Expression
				uint start9 = position;
				if((parse_Space().success) || (parse_Tab().success)){
					clearErrors();
				}else{
					setError("Expected Space or Tab.");
					position = start9;
					goto mismatch10;
				}
			}
			{//ZeroOrMoreExpr
				uint termPos11;
			loop11:
				termPos11 = position;
				{//Expression
					uint start12 = position;
					if((parse_WS().success)){
						clearErrors();
						goto loop11;
					}else{
						setError("Expected WS.");
						position = start12;
						goto loopend12;
					}
				}
			loopend12:
				{/*do nothing*/}
			}
			goto match9;
		mismatch10:
			{/*do nothing*/}
			position = start8;
			goto mismatch8;
		match9:
			clearErrors();
			goto match7;
		}
	match7:
		debug writefln("parse_WS() PASS");
		return ResultT!(bool)(true);
	mismatch8:
		position = start7;
		return ResultT!(bool)();
	}

	/*
	
SmallLetter
	::=  "a" |  "b" |  "c" |  "d" |  "e" |  "f" |  "g" |  "h" |  "i" |  "j" |  "k" |  "l" |  "m" |  "n" |  "o" |  "p" |  "q" |  "r" |  "s" |  "t" |  "u" |  "v" |  "w" |  "x" |  "y" |  "z";

	*/
	public ResultT!(bool) parse_SmallLetter(){
		debug writefln("parse_SmallLetter()");
		uint start13 = position;
		//no declarations
		
		
		{//Expression
			uint start14 = position;
			if((terminal("a").success) || (terminal("b").success) || (terminal("c").success) || (terminal("d").success) || (terminal("e").success) || (terminal("f").success) || (terminal("g").success) || (terminal("h").success) || (terminal("i").success) || (terminal("j").success) || (terminal("k").success) || (terminal("l").success) || (terminal("m").success) || (terminal("n").success) || (terminal("o").success) || (terminal("p").success) || (terminal("q").success) || (terminal("r").success) || (terminal("s").success) || (terminal("t").success) || (terminal("u").success) || (terminal("v").success) || (terminal("w").success) || (terminal("x").success) || (terminal("y").success) || (terminal("z").success)){
				clearErrors();
				goto match13;
			}else{
				position = start14;
				goto mismatch14;
			}
		}
	match13:
		debug writefln("parse_SmallLetter() PASS");
		return ResultT!(bool)(true);
	mismatch14:
		position = start13;
		return ResultT!(bool)();
	}

	/*
	
LargeLetter
	::=  "A" |  "B" |  "C" |  "D" |  "E" |  "F" |  "G" |  "H" |  "I" |  "J" |  "K" |  "L" |  "M" |  "N" |  "O" |  "P" |  "Q" |  "R" |  "S" |  "T" |  "U" |  "V" |  "W" |  "X" |  "Y" |  "Z";

	*/
	public ResultT!(bool) parse_LargeLetter(){
		debug writefln("parse_LargeLetter()");
		uint start15 = position;
		//no declarations
		
		
		{//Expression
			uint start16 = position;
			if((terminal("A").success) || (terminal("B").success) || (terminal("C").success) || (terminal("D").success) || (terminal("E").success) || (terminal("F").success) || (terminal("G").success) || (terminal("H").success) || (terminal("I").success) || (terminal("J").success) || (terminal("K").success) || (terminal("L").success) || (terminal("M").success) || (terminal("N").success) || (terminal("O").success) || (terminal("P").success) || (terminal("Q").success) || (terminal("R").success) || (terminal("S").success) || (terminal("T").success) || (terminal("U").success) || (terminal("V").success) || (terminal("W").success) || (terminal("X").success) || (terminal("Y").success) || (terminal("Z").success)){
				clearErrors();
				goto match15;
			}else{
				position = start16;
				goto mismatch16;
			}
		}
	match15:
		debug writefln("parse_LargeLetter() PASS");
		return ResultT!(bool)(true);
	mismatch16:
		position = start15;
		return ResultT!(bool)();
	}

	/*
	
Digit
	::=  "0" |  "1" |  "2" |  "3" |  "4" |  "5" |  "6" |  "7" |  "8" |  "9";

	*/
	public ResultT!(bool) parse_Digit(){
		debug writefln("parse_Digit()");
		uint start17 = position;
		//no declarations
		
		
		{//Expression
			uint start18 = position;
			if((terminal("0").success) || (terminal("1").success) || (terminal("2").success) || (terminal("3").success) || (terminal("4").success) || (terminal("5").success) || (terminal("6").success) || (terminal("7").success) || (terminal("8").success) || (terminal("9").success)){
				clearErrors();
				goto match17;
			}else{
				position = start18;
				goto mismatch18;
			}
		}
	match17:
		debug writefln("parse_Digit() PASS");
		return ResultT!(bool)(true);
	mismatch18:
		position = start17;
		return ResultT!(bool)();
	}

	/*
	
Label
	= int newLabel(char[] labelId)
	::= {  Newline |  Space |  Tab} Identifier:labelId  ":" {  Space |  Tab |  Newline};

	*/
	public ResultT!(int) parse_Label(){
		debug writefln("parse_Label()");
		uint start19 = position;
		char[] bind_labelId;
		
		
		{//Expression
			uint start20 = position;
			{//ZeroOrMoreExpr
				uint start21 = position;
				uint termPos22;
			loop23:
				termPos22 = position;
				if(parse_Identifier().assign!(char[])(bind_labelId)){
					goto loopend24;
				}
				{//Expression
					uint start23 = position;
					if((parse_Newline().success) || (parse_Space().success) || (parse_Tab().success)){
						clearErrors();
						goto loop23;
					}else{
						setError("Expected Newline, Space or Tab.");
						position = start23;
						goto mismatch22;
					}
				}
			loopend24:
				{/*do nothing*/}
			}
			if(!(terminal(":").success)){
				goto mismatch22;
			}
			{//ZeroOrMoreExpr
				uint termPos25;
			loop25:
				termPos25 = position;
				{//Expression
					uint start26 = position;
					if((parse_Space().success) || (parse_Tab().success) || (parse_Newline().success)){
						clearErrors();
						goto loop25;
					}else{
						setError("Expected Space, Tab or Newline.");
						position = start26;
						goto loopend26;
					}
				}
			loopend26:
				{/*do nothing*/}
			}
			goto match21;
		mismatch22:
			{/*do nothing*/}
			position = start20;
			goto mismatch20;
		match21:
			clearErrors();
			goto match19;
		}
	match19:
		debug writefln("parse_Label() PASS");
		auto value = newLabel(bind_labelId);
		return ResultT!(int)(value);
	mismatch20:
		position = start19;
		return ResultT!(int)();
	}

	/*
	
Comment
	= int foundComment()
	::= {  Newline |  Space |  Tab} ";" {  any} Newline;

	*/
	public ResultT!(int) parse_Comment(){
		debug writefln("parse_Comment()");
		uint start27 = position;
		
		
		{//Expression
			uint start28 = position;
			{//ZeroOrMoreExpr
				uint start29 = position;
				uint termPos30;
			loop31:
				termPos30 = position;
				if(terminal(";").success){
					goto loopend32;
				}
				{//Expression
					uint start31 = position;
					if((parse_Newline().success) || (parse_Space().success) || (parse_Tab().success)){
						clearErrors();
						goto loop31;
					}else{
						setError("Expected Newline, Space or Tab.");
						position = start31;
						goto mismatch30;
					}
				}
			loopend32:
				{/*do nothing*/}
			}
			{//ZeroOrMoreExpr
				uint start32 = position;
				uint termPos33;
			loop33:
				termPos33 = position;
				if(parse_Newline().success){
					goto loopend34;
				}
				{//Expression
					uint start34 = position;
					if((parse_any().success)){
						clearErrors();
						goto loop33;
					}else{
						setError("Expected any.");
						position = start34;
						goto mismatch30;
					}
				}
			loopend34:
				{/*do nothing*/}
			}
			goto match29;
		mismatch30:
			{/*do nothing*/}
			position = start28;
			goto mismatch28;
		match29:
			clearErrors();
			goto match27;
		}
	match27:
		debug writefln("parse_Comment() PASS");
		auto value = foundComment();
		return ResultT!(int)(value);
	mismatch28:
		position = start27;
		return ResultT!(int)();
	}

	/*
	
Stringvalue
	= char[] string
	::= (  "\"" {  any} "\""):string ;

	*/
	public ResultT!(char[]) parse_Stringvalue(){
		debug writefln("parse_Stringvalue()");
		uint start35 = position;
		char[] bind_string;
		
		
		{//Expression
			uint start36 = position;
			{//GroupExpr
				uint start37 = position;
				{//Expression
					uint start38 = position;
					if(!(terminal("\"").success)){
						goto mismatch40;
					}
					{//ZeroOrMoreExpr
						uint start39 = position;
						uint termPos40;
					loop41:
						termPos40 = position;
						if(terminal("\"").success){
							goto loopend42;
						}
						{//Expression
							uint start41 = position;
							if((parse_any().success)){
								clearErrors();
								goto loop41;
							}else{
								setError("Expected any.");
								position = start41;
								goto mismatch40;
							}
						}
					loopend42:
						{/*do nothing*/}
					}
					goto match39;
				mismatch40:
					{/*do nothing*/}
					position = start38;
					goto mismatch38;
				match39:
					clearErrors();
					{/*do nothing*/}
				}
				smartAssign!(char[],String)(bind_string,sliceData(start37,position));
			}
			goto match37;
		mismatch38:
			{/*do nothing*/}
			position = start36;
			goto mismatch36;
		match37:
			clearErrors();
			goto match35;
		}
	match35:
		debug writefln("parse_Stringvalue() PASS");
		return ResultT!(char[])(bind_string);
	mismatch36:
		position = start35;
		return ResultT!(char[])();
	}

	/*
	
StringParameter
	= Parameter newStringParameter(char[] param)
	::=  Stringvalue:param |  Identifier:param;

	*/
	public ResultT!(Parameter) parse_StringParameter(){
		debug writefln("parse_StringParameter()");
		uint start42 = position;
		char[] bind_param;
		
		
		{//Expression
			uint start43 = position;
			if((parse_Stringvalue().assign!(char[])(bind_param)) || (parse_Identifier().assign!(char[])(bind_param))){
				clearErrors();
				goto match43;
			}else{
				setError("Expected Stringvalue or Identifier.");
				position = start43;
				goto mismatch44;
			}
		}
	match43:
		debug writefln("parse_StringParameter() PASS");
		auto value = newStringParameter(bind_param);
		return ResultT!(Parameter)(value);
	mismatch44:
		position = start42;
		return ResultT!(Parameter)();
	}

	/*
	
LongParameter
	= Parameter newLongParameter(char[] param)
	::=  Longstring:param |  Identifier:param;

	*/
	public ResultT!(Parameter) parse_LongParameter(){
		debug writefln("parse_LongParameter()");
		uint start44 = position;
		char[] bind_param;
		
		
		{//Expression
			uint start45 = position;
			if((parse_Longstring().assign!(char[])(bind_param)) || (parse_Identifier().assign!(char[])(bind_param))){
				clearErrors();
				goto match45;
			}else{
				setError("Expected Longstring or Identifier.");
				position = start45;
				goto mismatch46;
			}
		}
	match45:
		debug writefln("parse_LongParameter() PASS");
		auto value = newLongParameter(bind_param);
		return ResultT!(Parameter)(value);
	mismatch46:
		position = start44;
		return ResultT!(Parameter)();
	}

	/*
	
FloatParameter
	= Parameter newFloatParameter(char[] param)
	::=  Floatstring:param |  Identifier:param;

	*/
	public ResultT!(Parameter) parse_FloatParameter(){
		debug writefln("parse_FloatParameter()");
		uint start46 = position;
		char[] bind_param;
		
		
		{//Expression
			uint start47 = position;
			if((parse_Floatstring().assign!(char[])(bind_param)) || (parse_Identifier().assign!(char[])(bind_param))){
				clearErrors();
				goto match47;
			}else{
				setError("Expected Floatstring or Identifier.");
				position = start47;
				goto mismatch48;
			}
		}
	match47:
		debug writefln("parse_FloatParameter() PASS");
		auto value = newFloatParameter(bind_param);
		return ResultT!(Parameter)(value);
	mismatch48:
		position = start46;
		return ResultT!(Parameter)();
	}

	/*
	
Longstring
	= char[] longValue
	::= ( [  "-"] (  Digit {  Digit})):longValue ;

	*/
	public ResultT!(char[]) parse_Longstring(){
		debug writefln("parse_Longstring()");
		uint start48 = position;
		char[] bind_longValue;
		
		
		{//Expression
			uint start49 = position;
			{//GroupExpr
				uint start50 = position;
				{//Expression
					uint start51 = position;
					{//OptionalExpr
						{//Expression
							uint start53 = position;
							if((terminal("-").success)){
								clearErrors();
							}else{
								position = start53;
							}
						}
					}
					{//Expression
						uint start54 = position;
						if(!(parse_Digit().success)){
							goto mismatch56;
						}
						{//ZeroOrMoreExpr
							uint termPos56;
						loop57:
							termPos56 = position;
							{//Expression
								uint start57 = position;
								if((parse_Digit().success)){
									clearErrors();
									goto loop57;
								}else{
									setError("Expected Digit.");
									position = start57;
									goto loopend58;
								}
							}
						loopend58:
							{/*do nothing*/}
						}
						goto match55;
					mismatch56:
						setError("Expected Digit.");
						position = start54;
						goto mismatch54;
					match55:
						clearErrors();
						{/*do nothing*/}
					}
					goto match53;
				mismatch54:
					{/*do nothing*/}
					position = start51;
					goto mismatch52;
				match53:
					clearErrors();
					{/*do nothing*/}
				}
				smartAssign!(char[],String)(bind_longValue,sliceData(start50,position));
			}
			goto match51;
		mismatch52:
			{/*do nothing*/}
			position = start49;
			goto mismatch50;
		match51:
			clearErrors();
			goto match49;
		}
	match49:
		debug writefln("parse_Longstring() PASS");
		return ResultT!(char[])(bind_longValue);
	mismatch50:
		position = start48;
		return ResultT!(char[])();
	}

	/*
	
Floatstring
	= char[] floatVal
	::= ( [  "-"] ( (  Digit {  Digit})  "." (  Digit {  Digit}))):floatVal ;

	*/
	public ResultT!(char[]) parse_Floatstring(){
		debug writefln("parse_Floatstring()");
		uint start58 = position;
		char[] bind_floatVal;
		
		
		{//Expression
			uint start59 = position;
			{//GroupExpr
				uint start60 = position;
				{//Expression
					uint start61 = position;
					{//OptionalExpr
						{//Expression
							uint start63 = position;
							if((terminal("-").success)){
								clearErrors();
							}else{
								position = start63;
							}
						}
					}
					{//Expression
						uint start64 = position;
						{//Expression
							uint start65 = position;
							if(!(parse_Digit().success)){
								goto mismatch68;
							}
							{//ZeroOrMoreExpr
								uint termPos67;
							loop69:
								termPos67 = position;
								{//Expression
									uint start68 = position;
									if((parse_Digit().success)){
										clearErrors();
										goto loop69;
									}else{
										setError("Expected Digit.");
										position = start68;
										goto loopend70;
									}
								}
							loopend70:
								{/*do nothing*/}
							}
							goto match67;
						mismatch68:
							setError("Expected Digit.");
							position = start65;
							goto mismatch66;
						match67:
							clearErrors();
							{/*do nothing*/}
						}
						if(!(terminal(".").success)){
							goto mismatch66;
						}
						{//Expression
							uint start69 = position;
							if(!(parse_Digit().success)){
								goto mismatch72;
							}
							{//ZeroOrMoreExpr
								uint termPos71;
							loop73:
								termPos71 = position;
								{//Expression
									uint start72 = position;
									if((parse_Digit().success)){
										clearErrors();
										goto loop73;
									}else{
										setError("Expected Digit.");
										position = start72;
										goto loopend74;
									}
								}
							loopend74:
								{/*do nothing*/}
							}
							goto match71;
						mismatch72:
							setError("Expected Digit.");
							position = start69;
							goto mismatch66;
						match71:
							clearErrors();
							{/*do nothing*/}
						}
						goto match65;
					mismatch66:
						{/*do nothing*/}
						position = start64;
						goto mismatch64;
					match65:
						clearErrors();
						{/*do nothing*/}
					}
					goto match63;
				mismatch64:
					{/*do nothing*/}
					position = start61;
					goto mismatch62;
				match63:
					clearErrors();
					{/*do nothing*/}
				}
				smartAssign!(char[],String)(bind_floatVal,sliceData(start60,position));
			}
			goto match61;
		mismatch62:
			{/*do nothing*/}
			position = start59;
			goto mismatch60;
		match61:
			clearErrors();
			goto match59;
		}
	match59:
		debug writefln("parse_Floatstring() PASS");
		return ResultT!(char[])(bind_floatVal);
	mismatch60:
		position = start58;
		return ResultT!(char[])();
	}

	/*
	
Longvalue
	= int toLong(String longValue)
	::= ( [  "-"] (  Digit {  Digit})):longValue ;

	*/
	public ResultT!(int) parse_Longvalue(){
		debug writefln("parse_Longvalue()");
		uint start73 = position;
		String bind_longValue;
		
		
		{//Expression
			uint start74 = position;
			{//GroupExpr
				uint start75 = position;
				{//Expression
					uint start76 = position;
					{//OptionalExpr
						{//Expression
							uint start78 = position;
							if((terminal("-").success)){
								clearErrors();
							}else{
								position = start78;
							}
						}
					}
					{//Expression
						uint start79 = position;
						if(!(parse_Digit().success)){
							goto mismatch82;
						}
						{//ZeroOrMoreExpr
							uint termPos81;
						loop83:
							termPos81 = position;
							{//Expression
								uint start82 = position;
								if((parse_Digit().success)){
									clearErrors();
									goto loop83;
								}else{
									setError("Expected Digit.");
									position = start82;
									goto loopend84;
								}
							}
						loopend84:
							{/*do nothing*/}
						}
						goto match81;
					mismatch82:
						setError("Expected Digit.");
						position = start79;
						goto mismatch80;
					match81:
						clearErrors();
						{/*do nothing*/}
					}
					goto match79;
				mismatch80:
					{/*do nothing*/}
					position = start76;
					goto mismatch78;
				match79:
					clearErrors();
					{/*do nothing*/}
				}
				smartAssign!(String,String)(bind_longValue,sliceData(start75,position));
			}
			goto match77;
		mismatch78:
			{/*do nothing*/}
			position = start74;
			goto mismatch76;
		match77:
			clearErrors();
			goto match75;
		}
	match75:
		debug writefln("parse_Longvalue() PASS");
		auto value = toLong(bind_longValue);
		return ResultT!(int)(value);
	mismatch76:
		position = start73;
		return ResultT!(int)();
	}

	/*
	
Floatvalue
	= float toFloat(String floatValue)
	::= ( [  "-"] ( (  Digit {  Digit})  "." (  Digit {  Digit}))):floatValue  | ( [  "-"] (  "." (  Digit {  Digit}))):floatValue ;

	*/
	public ResultT!(float) parse_Floatvalue(){
		debug writefln("parse_Floatvalue()");
		uint start83 = position;
		String bind_floatValue;
		
		
		{//Expression
			uint start84 = position;
			{//GroupExpr
				uint start85 = position;
				{//Expression
					uint start86 = position;
					{//OptionalExpr
						{//Expression
							uint start88 = position;
							if((terminal("-").success)){
								clearErrors();
							}else{
								position = start88;
							}
						}
					}
					{//Expression
						uint start89 = position;
						{//Expression
							uint start90 = position;
							if(!(parse_Digit().success)){
								goto mismatch94;
							}
							{//ZeroOrMoreExpr
								uint termPos92;
							loop95:
								termPos92 = position;
								{//Expression
									uint start93 = position;
									if((parse_Digit().success)){
										clearErrors();
										goto loop95;
									}else{
										setError("Expected Digit.");
										position = start93;
										goto loopend96;
									}
								}
							loopend96:
								{/*do nothing*/}
							}
							goto match93;
						mismatch94:
							setError("Expected Digit.");
							position = start90;
							goto mismatch92;
						match93:
							clearErrors();
							{/*do nothing*/}
						}
						if(!(terminal(".").success)){
							goto mismatch92;
						}
						{//Expression
							uint start94 = position;
							if(!(parse_Digit().success)){
								goto mismatch98;
							}
							{//ZeroOrMoreExpr
								uint termPos96;
							loop99:
								termPos96 = position;
								{//Expression
									uint start97 = position;
									if((parse_Digit().success)){
										clearErrors();
										goto loop99;
									}else{
										setError("Expected Digit.");
										position = start97;
										goto loopend100;
									}
								}
							loopend100:
								{/*do nothing*/}
							}
							goto match97;
						mismatch98:
							setError("Expected Digit.");
							position = start94;
							goto mismatch92;
						match97:
							clearErrors();
							{/*do nothing*/}
						}
						goto match91;
					mismatch92:
						{/*do nothing*/}
						position = start89;
						goto mismatch90;
					match91:
						clearErrors();
						{/*do nothing*/}
					}
					goto match89;
				mismatch90:
					{/*do nothing*/}
					position = start86;
					goto mismatch88;
				match89:
					clearErrors();
					{/*do nothing*/}
				}
				smartAssign!(String,String)(bind_floatValue,sliceData(start85,position));
			}
			goto match87;
		mismatch88:
			{//GroupExpr
				uint start98 = position;
				{//Expression
					uint start99 = position;
					{//OptionalExpr
						{//Expression
							uint start101 = position;
							if((terminal("-").success)){
								clearErrors();
							}else{
								position = start101;
							}
						}
					}
					{//Expression
						uint start102 = position;
						if(!(terminal(".").success)){
							goto mismatch105;
						}
						{//Expression
							uint start103 = position;
							if(!(parse_Digit().success)){
								goto mismatch107;
							}
							{//ZeroOrMoreExpr
								uint termPos105;
							loop108:
								termPos105 = position;
								{//Expression
									uint start106 = position;
									if((parse_Digit().success)){
										clearErrors();
										goto loop108;
									}else{
										setError("Expected Digit.");
										position = start106;
										goto loopend109;
									}
								}
							loopend109:
								{/*do nothing*/}
							}
							goto match106;
						mismatch107:
							setError("Expected Digit.");
							position = start103;
							goto mismatch105;
						match106:
							clearErrors();
							{/*do nothing*/}
						}
						goto match104;
					mismatch105:
						{/*do nothing*/}
						position = start102;
						goto mismatch103;
					match104:
						clearErrors();
						{/*do nothing*/}
					}
					goto match102;
				mismatch103:
					{/*do nothing*/}
					position = start99;
					goto mismatch101;
				match102:
					clearErrors();
					{/*do nothing*/}
				}
				smartAssign!(String,String)(bind_floatValue,sliceData(start98,position));
			}
			goto match87;
		mismatch101:
			{/*do nothing*/}
			position = start84;
			goto mismatch86;
		match87:
			clearErrors();
			goto match85;
		}
	match85:
		debug writefln("parse_Floatvalue() PASS");
		auto value = toFloat(bind_floatValue);
		return ResultT!(float)(value);
	mismatch86:
		position = start83;
		return ResultT!(float)();
	}

	/*
	
Identifier
	= char[] ident
	::= ( (  SmallLetter |  LargeLetter) { (  "_" (  SmallLetter |  LargeLetter |  Digit)) | (  SmallLetter |  LargeLetter |  Digit)}):ident ;

	*/
	public ResultT!(char[]) parse_Identifier(){
		debug writefln("parse_Identifier()");
		uint start107 = position;
		char[] bind_ident;
		
		
		{//Expression
			uint start108 = position;
			{//GroupExpr
				uint start109 = position;
				{//Expression
					uint start110 = position;
					{//Expression
						uint start111 = position;
						if((parse_SmallLetter().success) || (parse_LargeLetter().success)){
							clearErrors();
						}else{
							setError("Expected SmallLetter or LargeLetter.");
							position = start111;
							goto mismatch115;
						}
					}
					{//ZeroOrMoreExpr
						uint termPos113;
					loop116:
						termPos113 = position;
						{//Expression
							uint start114 = position;
							{//Expression
								uint start115 = position;
								if(!(terminal("_").success)){
									goto mismatch121;
								}
								{//Expression
									uint start116 = position;
									if((parse_SmallLetter().success) || (parse_LargeLetter().success) || (parse_Digit().success)){
										clearErrors();
									}else{
										setError("Expected SmallLetter, LargeLetter or Digit.");
										position = start116;
										goto mismatch121;
									}
								}
								goto match120;
							mismatch121:
								{/*do nothing*/}
								position = start115;
								goto mismatch119;
							match120:
								clearErrors();
								{/*do nothing*/}
							}
							goto match118;
						mismatch119:
							{//Expression
								uint start117 = position;
								if((parse_SmallLetter().success) || (parse_LargeLetter().success) || (parse_Digit().success)){
									clearErrors();
								}else{
									setError("Expected SmallLetter, LargeLetter or Digit.");
									position = start117;
									goto mismatch122;
								}
							}
							goto match118;
						mismatch122:
							{/*do nothing*/}
							position = start114;
							goto loopend117;
						match118:
							clearErrors();
							goto loop116;
						}
					loopend117:
						{/*do nothing*/}
					}
					goto match114;
				mismatch115:
					{/*do nothing*/}
					position = start110;
					goto mismatch113;
				match114:
					clearErrors();
					{/*do nothing*/}
				}
				smartAssign!(char[],String)(bind_ident,sliceData(start109,position));
			}
			goto match112;
		mismatch113:
			{/*do nothing*/}
			position = start108;
			goto mismatch111;
		match112:
			clearErrors();
			goto match110;
		}
	match110:
		debug writefln("parse_Identifier() PASS");
		return ResultT!(char[])(bind_ident);
	mismatch111:
		position = start107;
		return ResultT!(char[])();
	}

	/*
	
Script
	::= ( [  Comment]  Header {  Comment |  Label | ( [  Label]  Code)} Footer [  Comment]) {  Newline |  Space |  Tab}{  Script};

	*/
	public ResultT!(bool) parse_Script(){
		debug writefln("parse_Script()");
		uint start118 = position;
		//no declarations
		
		
		{//Expression
			uint start119 = position;
			{//Expression
				uint start120 = position;
				{//OptionalExpr
					{//Expression
						uint start122 = position;
						if((parse_Comment().success)){
							clearErrors();
						}else{
							position = start122;
						}
					}
				}
				if(!(parse_Header().success)){
					goto mismatch128;
				}
				{//ZeroOrMoreExpr
					uint start123 = position;
					uint termPos124;
				loop129:
					termPos124 = position;
					if(parse_Footer().success){
						goto loopend130;
					}
					{//Expression
						uint start125 = position;
						if(parse_Comment().success){
							goto match131;
						}
						if(parse_Label().success){
							goto match131;
						}
						{//Expression
							uint start126 = position;
							{//OptionalExpr
								{//Expression
									uint start128 = position;
									if((parse_Label().success)){
										clearErrors();
									}else{
										position = start128;
									}
								}
							}
							if(!(parse_Code().success)){
								goto mismatch134;
							}
							goto match133;
						mismatch134:
							{/*do nothing*/}
							position = start126;
							goto mismatch132;
						match133:
							clearErrors();
							{/*do nothing*/}
						}
						goto match131;
					mismatch132:
						setError("Expected Comment or Label.");
						position = start125;
						goto mismatch128;
					match131:
						clearErrors();
						goto loop129;
					}
				loopend130:
					{/*do nothing*/}
				}
				{//OptionalExpr
					{//Expression
						uint start130 = position;
						if((parse_Comment().success)){
							clearErrors();
						}else{
							position = start130;
						}
					}
				}
				goto match127;
			mismatch128:
				{/*do nothing*/}
				position = start120;
				goto mismatch126;
			match127:
				clearErrors();
				{/*do nothing*/}
			}
			{//ZeroOrMoreExpr
				uint start131 = position;
				uint termPos132;
			loop135:
				termPos132 = position;
				{//ZeroOrMoreExpr
					uint termPos134;
				loop137:
					termPos134 = position;
					{//Expression
						uint start135 = position;
						if((parse_Script().success)){
							clearErrors();
							goto loop137;
						}else{
							setError("Expected Script.");
							position = start135;
							goto loopend138;
						}
					}
				loopend138:
					goto loopend136;
				}
				{//Expression
					uint start136 = position;
					if((parse_Newline().success) || (parse_Space().success) || (parse_Tab().success)){
						clearErrors();
						goto loop135;
					}else{
						setError("Expected Newline, Space or Tab.");
						position = start136;
						goto mismatch126;
					}
				}
			loopend136:
				{/*do nothing*/}
			}
			goto match125;
		mismatch126:
			{/*do nothing*/}
			position = start119;
			goto mismatch124;
		match125:
			clearErrors();
			goto match123;
		}
	match123:
		debug writefln("parse_Script() PASS");
		return ResultT!(bool)(true);
	mismatch124:
		position = start118;
		return ResultT!(bool)();
	}

	/*
	
Header
	= int beginScript(char[] scriptName,String startScript)
	::= {  Newline |  Space |  Tab} "Begin"  WS  Identifier:scriptName [  WS  "start"]:startScript  [  WS]  Newline {  Newline};

	*/
	public ResultT!(int) parse_Header(){
		debug writefln("parse_Header()");
		uint start137 = position;
		char[] bind_scriptName;
		String bind_startScript;
		
		
		{//Expression
			uint start138 = position;
			{//ZeroOrMoreExpr
				uint start139 = position;
				uint termPos140;
			loop143:
				termPos140 = position;
				if(terminal("Begin").success){
					goto loopend144;
				}
				{//Expression
					uint start141 = position;
					if((parse_Newline().success) || (parse_Space().success) || (parse_Tab().success)){
						clearErrors();
						goto loop143;
					}else{
						setError("Expected Newline, Space or Tab.");
						position = start141;
						goto mismatch142;
					}
				}
			loopend144:
				{/*do nothing*/}
			}
			if(!(parse_WS().success)){
				goto mismatch142;
			}
			if(!(parse_Identifier().assign!(char[])(bind_scriptName))){
				goto mismatch142;
			}
			{//OptionalExpr
				uint start142 = position;
				{//Expression
					uint start143 = position;
					if((parse_WS().success && terminal("start").success)){
						clearErrors();
					}else{
						position = start143;
					}
				}
				smartAssign!(String,String)(bind_startScript,sliceData(start142,position));
			}
			{//OptionalExpr
				{//Expression
					uint start145 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start145;
					}
				}
			}
			if(!(parse_Newline().success)){
				goto mismatch142;
			}
			{//ZeroOrMoreExpr
				uint termPos147;
			loop145:
				termPos147 = position;
				{//Expression
					uint start148 = position;
					if((parse_Newline().success)){
						clearErrors();
						goto loop145;
					}else{
						setError("Expected Newline.");
						position = start148;
						goto loopend146;
					}
				}
			loopend146:
				{/*do nothing*/}
			}
			goto match141;
		mismatch142:
			{/*do nothing*/}
			position = start138;
			goto mismatch140;
		match141:
			clearErrors();
			goto match139;
		}
	match139:
		debug writefln("parse_Header() PASS");
		auto value = beginScript(bind_scriptName,bind_startScript);
		return ResultT!(int)(value);
	mismatch140:
		position = start137;
		return ResultT!(int)();
	}

	/*
	
Footer
	= int endScript()
	::= {  Newline |  Space |  Tab} "End";

	*/
	public ResultT!(int) parse_Footer(){
		debug writefln("parse_Footer()");
		uint start149 = position;
		
		
		{//Expression
			uint start150 = position;
			{//ZeroOrMoreExpr
				uint start151 = position;
				uint termPos152;
			loop151:
				termPos152 = position;
				if(terminal("End").success){
					goto loopend152;
				}
				{//Expression
					uint start153 = position;
					if((parse_Newline().success) || (parse_Space().success) || (parse_Tab().success)){
						clearErrors();
						goto loop151;
					}else{
						setError("Expected Newline, Space or Tab.");
						position = start153;
						goto mismatch150;
					}
				}
			loopend152:
				{/*do nothing*/}
			}
			goto match149;
		mismatch150:
			{/*do nothing*/}
			position = start150;
			goto mismatch148;
		match149:
			clearErrors();
			goto match147;
		}
	match147:
		debug writefln("parse_Footer() PASS");
		auto value = endScript();
		return ResultT!(int)(value);
	mismatch148:
		position = start149;
		return ResultT!(int)();
	}

	/*
	
Code
	::= {  Newline |  Space |  Tab}(  Set |  Add |  Mul |  Comp |  Jump |  Function |  Inc) [  Comment] {  WS} Newline {  Newline};

	*/
	public ResultT!(bool) parse_Code(){
		debug writefln("parse_Code()");
		uint start154 = position;
		//no declarations
		
		
		{//Expression
			uint start155 = position;
			{//ZeroOrMoreExpr
				uint start156 = position;
				uint termPos157;
			loop157:
				termPos157 = position;
				{//Expression
					uint start158 = position;
					if((parse_Set().success) || (parse_Add().success) || (parse_Mul().success) || (parse_Comp().success) || (parse_Jump().success) || (parse_Function().success) || (parse_Inc().success)){
						clearErrors();
						goto loopend158;
					}else{
						position = start158;
					}
				}
				{//Expression
					uint start159 = position;
					if((parse_Newline().success) || (parse_Space().success) || (parse_Tab().success)){
						clearErrors();
						goto loop157;
					}else{
						setError("Expected Newline, Space or Tab.");
						position = start159;
						goto mismatch156;
					}
				}
			loopend158:
				{/*do nothing*/}
			}
			{//OptionalExpr
				{//Expression
					uint start161 = position;
					if((parse_Comment().success)){
						clearErrors();
					}else{
						position = start161;
					}
				}
			}
			{//ZeroOrMoreExpr
				uint start162 = position;
				uint termPos163;
			loop159:
				termPos163 = position;
				if(parse_Newline().success){
					goto loopend160;
				}
				{//Expression
					uint start164 = position;
					if((parse_WS().success)){
						clearErrors();
						goto loop159;
					}else{
						setError("Expected WS.");
						position = start164;
						goto mismatch156;
					}
				}
			loopend160:
				{/*do nothing*/}
			}
			{//ZeroOrMoreExpr
				uint termPos166;
			loop161:
				termPos166 = position;
				{//Expression
					uint start167 = position;
					if((parse_Newline().success)){
						clearErrors();
						goto loop161;
					}else{
						setError("Expected Newline.");
						position = start167;
						goto loopend162;
					}
				}
			loopend162:
				{/*do nothing*/}
			}
			goto match155;
		mismatch156:
			{/*do nothing*/}
			position = start155;
			goto mismatch154;
		match155:
			clearErrors();
			goto match153;
		}
	match153:
		debug writefln("parse_Code() PASS");
		return ResultT!(bool)(true);
	mismatch154:
		position = start154;
		return ResultT!(bool)();
	}

	/*
	
Comp
	::= (  Compvarvar |  Compvarfloat |  Compvarlong |  Compvarstring);

	*/
	public ResultT!(bool) parse_Comp(){
		debug writefln("parse_Comp()");
		uint start168 = position;
		//no declarations
		
		
		{//Expression
			uint start169 = position;
			{//Expression
				uint start170 = position;
				if((parse_Compvarvar().success) || (parse_Compvarfloat().success) || (parse_Compvarlong().success) || (parse_Compvarstring().success)){
					clearErrors();
				}else{
					setError("Expected Compvarvar, Compvarfloat, Compvarlong or Compvarstring.");
					position = start170;
					goto mismatch166;
				}
			}
			goto match165;
		mismatch166:
			{/*do nothing*/}
			position = start169;
			goto mismatch164;
		match165:
			clearErrors();
			goto match163;
		}
	match163:
		debug writefln("parse_Comp() PASS");
		return ResultT!(bool)(true);
	mismatch164:
		position = start168;
		return ResultT!(bool)();
	}

	/*
	
Jump
	::=  JNE |  JMP |  JE |  JG |  JL;

	*/
	public ResultT!(bool) parse_Jump(){
		debug writefln("parse_Jump()");
		uint start171 = position;
		//no declarations
		
		
		{//Expression
			uint start172 = position;
			if((parse_JNE().success) || (parse_JMP().success) || (parse_JE().success) || (parse_JG().success) || (parse_JL().success)){
				clearErrors();
				goto match167;
			}else{
				setError("Expected JNE, JMP, JE, JG or JL.");
				position = start172;
				goto mismatch168;
			}
		}
	match167:
		debug writefln("parse_Jump() PASS");
		return ResultT!(bool)(true);
	mismatch168:
		position = start171;
		return ResultT!(bool)();
	}

	/*
	
JNE
	= int MATCH_jne(char[] labelName)
	::=  "jne"  WS  Identifier:labelName;

	*/
	public ResultT!(int) parse_JNE(){
		debug writefln("parse_JNE()");
		uint start173 = position;
		char[] bind_labelName;
		
		
		{//Expression
			uint start174 = position;
			if((terminal("jne").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_labelName))){
				clearErrors();
				goto match169;
			}else{
				position = start174;
				goto mismatch170;
			}
		}
	match169:
		debug writefln("parse_JNE() PASS");
		auto value = MATCH_jne(bind_labelName);
		return ResultT!(int)(value);
	mismatch170:
		position = start173;
		return ResultT!(int)();
	}

	/*
	
JG
	= int MATCH_jg(char[] labelName)
	::=  "jg"  WS  Identifier:labelName;

	*/
	public ResultT!(int) parse_JG(){
		debug writefln("parse_JG()");
		uint start175 = position;
		char[] bind_labelName;
		
		
		{//Expression
			uint start176 = position;
			if((terminal("jg").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_labelName))){
				clearErrors();
				goto match171;
			}else{
				position = start176;
				goto mismatch172;
			}
		}
	match171:
		debug writefln("parse_JG() PASS");
		auto value = MATCH_jg(bind_labelName);
		return ResultT!(int)(value);
	mismatch172:
		position = start175;
		return ResultT!(int)();
	}

	/*
	
JL
	= int MATCH_jl(char[] labelName)
	::=  "jl"  WS  Identifier:labelName;

	*/
	public ResultT!(int) parse_JL(){
		debug writefln("parse_JL()");
		uint start177 = position;
		char[] bind_labelName;
		
		
		{//Expression
			uint start178 = position;
			if((terminal("jl").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_labelName))){
				clearErrors();
				goto match173;
			}else{
				position = start178;
				goto mismatch174;
			}
		}
	match173:
		debug writefln("parse_JL() PASS");
		auto value = MATCH_jl(bind_labelName);
		return ResultT!(int)(value);
	mismatch174:
		position = start177;
		return ResultT!(int)();
	}

	/*
	
JE
	= int MATCH_je(char[] labelName)
	::=  "je"  WS  Identifier:labelName;

	*/
	public ResultT!(int) parse_JE(){
		debug writefln("parse_JE()");
		uint start179 = position;
		char[] bind_labelName;
		
		
		{//Expression
			uint start180 = position;
			if((terminal("je").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_labelName))){
				clearErrors();
				goto match175;
			}else{
				position = start180;
				goto mismatch176;
			}
		}
	match175:
		debug writefln("parse_JE() PASS");
		auto value = MATCH_je(bind_labelName);
		return ResultT!(int)(value);
	mismatch176:
		position = start179;
		return ResultT!(int)();
	}

	/*
	
JMP
	= int MATCH_jmp(char[] labelName)
	::=  "jmp"  WS  Identifier:labelName;

	*/
	public ResultT!(int) parse_JMP(){
		debug writefln("parse_JMP()");
		uint start181 = position;
		char[] bind_labelName;
		
		
		{//Expression
			uint start182 = position;
			if((terminal("jmp").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_labelName))){
				clearErrors();
				goto match177;
			}else{
				position = start182;
				goto mismatch178;
			}
		}
	match177:
		debug writefln("parse_JMP() PASS");
		auto value = MATCH_jmp(bind_labelName);
		return ResultT!(int)(value);
	mismatch178:
		position = start181;
		return ResultT!(int)();
	}

	/*
	
Compvarvar
	= int MATCH_compVarVar(char[] ident1,char[] ident2)
	::=  "comp"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2;

	*/
	public ResultT!(int) parse_Compvarvar(){
		debug writefln("parse_Compvarvar()");
		uint start183 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		
		
		{//Expression
			uint start184 = position;
			if(!(terminal("comp").success)){
				goto mismatch182;
			}
			if(!(parse_WS().success)){
				goto mismatch182;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch182;
			}
			{//OptionalExpr
				{//Expression
					uint start186 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start186;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch182;
			}
			{//OptionalExpr
				{//Expression
					uint start188 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start188;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch182;
			}
			goto match181;
		mismatch182:
			{/*do nothing*/}
			position = start184;
			goto mismatch180;
		match181:
			clearErrors();
			goto match179;
		}
	match179:
		debug writefln("parse_Compvarvar() PASS");
		auto value = MATCH_compVarVar(bind_ident1,bind_ident2);
		return ResultT!(int)(value);
	mismatch180:
		position = start183;
		return ResultT!(int)();
	}

	/*
	
Compvarstring
	= int MATCH_compVarString(char[] ident1,char[] stringVal)
	::=  "comp"  WS  Identifier:ident1 [  WS]  "," [  WS]  Stringvalue:stringVal;

	*/
	public ResultT!(int) parse_Compvarstring(){
		debug writefln("parse_Compvarstring()");
		uint start189 = position;
		char[] bind_ident1;
		char[] bind_stringVal;
		
		
		{//Expression
			uint start190 = position;
			if(!(terminal("comp").success)){
				goto mismatch186;
			}
			if(!(parse_WS().success)){
				goto mismatch186;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch186;
			}
			{//OptionalExpr
				{//Expression
					uint start192 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start192;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch186;
			}
			{//OptionalExpr
				{//Expression
					uint start194 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start194;
					}
				}
			}
			if(!(parse_Stringvalue().assign!(char[])(bind_stringVal))){
				goto mismatch186;
			}
			goto match185;
		mismatch186:
			{/*do nothing*/}
			position = start190;
			goto mismatch184;
		match185:
			clearErrors();
			goto match183;
		}
	match183:
		debug writefln("parse_Compvarstring() PASS");
		auto value = MATCH_compVarString(bind_ident1,bind_stringVal);
		return ResultT!(int)(value);
	mismatch184:
		position = start189;
		return ResultT!(int)();
	}

	/*
	
Compvarlong
	= int MATCH_compVarLong(char[] ident1,int longVal)
	::=  "comp"  WS  Identifier:ident1 [  WS]  "," [  WS]  Longvalue:longVal;

	*/
	public ResultT!(int) parse_Compvarlong(){
		debug writefln("parse_Compvarlong()");
		uint start195 = position;
		char[] bind_ident1;
		int bind_longVal;
		
		
		{//Expression
			uint start196 = position;
			if(!(terminal("comp").success)){
				goto mismatch190;
			}
			if(!(parse_WS().success)){
				goto mismatch190;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch190;
			}
			{//OptionalExpr
				{//Expression
					uint start198 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start198;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch190;
			}
			{//OptionalExpr
				{//Expression
					uint start200 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start200;
					}
				}
			}
			if(!(parse_Longvalue().assign!(int)(bind_longVal))){
				goto mismatch190;
			}
			goto match189;
		mismatch190:
			{/*do nothing*/}
			position = start196;
			goto mismatch188;
		match189:
			clearErrors();
			goto match187;
		}
	match187:
		debug writefln("parse_Compvarlong() PASS");
		auto value = MATCH_compVarLong(bind_ident1,bind_longVal);
		return ResultT!(int)(value);
	mismatch188:
		position = start195;
		return ResultT!(int)();
	}

	/*
	
Compvarfloat
	= int MATCH_compVarFloat(char[] ident1,float floatVal)
	::=  "comp"  WS  Identifier:ident1 [  WS]  "," [  WS]  Floatvalue:floatVal;

	*/
	public ResultT!(int) parse_Compvarfloat(){
		debug writefln("parse_Compvarfloat()");
		uint start201 = position;
		char[] bind_ident1;
		float bind_floatVal;
		
		
		{//Expression
			uint start202 = position;
			if(!(terminal("comp").success)){
				goto mismatch194;
			}
			if(!(parse_WS().success)){
				goto mismatch194;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch194;
			}
			{//OptionalExpr
				{//Expression
					uint start204 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start204;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch194;
			}
			{//OptionalExpr
				{//Expression
					uint start206 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start206;
					}
				}
			}
			if(!(parse_Floatvalue().assign!(float)(bind_floatVal))){
				goto mismatch194;
			}
			goto match193;
		mismatch194:
			{/*do nothing*/}
			position = start202;
			goto mismatch192;
		match193:
			clearErrors();
			goto match191;
		}
	match191:
		debug writefln("parse_Compvarfloat() PASS");
		auto value = MATCH_compVarFloat(bind_ident1,bind_floatVal);
		return ResultT!(int)(value);
	mismatch192:
		position = start201;
		return ResultT!(int)();
	}

	/*
	
Set
	::= (  SetToResult |  SetToVar |  SetToFloat |  SetToLong |  SetToString);

	*/
	public ResultT!(bool) parse_Set(){
		debug writefln("parse_Set()");
		uint start207 = position;
		//no declarations
		
		
		{//Expression
			uint start208 = position;
			{//Expression
				uint start209 = position;
				if((parse_SetToResult().success) || (parse_SetToVar().success) || (parse_SetToFloat().success) || (parse_SetToLong().success) || (parse_SetToString().success)){
					clearErrors();
				}else{
					setError("Expected SetToResult, SetToVar, SetToFloat, SetToLong or SetToString.");
					position = start209;
					goto mismatch198;
				}
			}
			goto match197;
		mismatch198:
			{/*do nothing*/}
			position = start208;
			goto mismatch196;
		match197:
			clearErrors();
			goto match195;
		}
	match195:
		debug writefln("parse_Set() PASS");
		return ResultT!(bool)(true);
	mismatch196:
		position = start207;
		return ResultT!(bool)();
	}

	/*
	
SetToLong
	= int MATCH_setToLong(char[] ident,int longVal)
	::=  "set"  WS  Identifier:ident  WS  "to"  WS  Longvalue:longVal;

	*/
	public ResultT!(int) parse_SetToLong(){
		debug writefln("parse_SetToLong()");
		uint start210 = position;
		char[] bind_ident;
		int bind_longVal;
		
		
		{//Expression
			uint start211 = position;
			if((terminal("set").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_ident) && parse_WS().success && terminal("to").success && parse_WS().success && parse_Longvalue().assign!(int)(bind_longVal))){
				clearErrors();
				goto match199;
			}else{
				position = start211;
				goto mismatch200;
			}
		}
	match199:
		debug writefln("parse_SetToLong() PASS");
		auto value = MATCH_setToLong(bind_ident,bind_longVal);
		return ResultT!(int)(value);
	mismatch200:
		position = start210;
		return ResultT!(int)();
	}

	/*
	
SetToVar
	= int MATCH_setToVar(char[] ident1,char[] ident2)
	::=  "set"  WS  Identifier:ident1  WS  "to"  WS  Identifier:ident2;

	*/
	public ResultT!(int) parse_SetToVar(){
		debug writefln("parse_SetToVar()");
		uint start212 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		
		
		{//Expression
			uint start213 = position;
			if((terminal("set").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_ident1) && parse_WS().success && terminal("to").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_ident2))){
				clearErrors();
				goto match201;
			}else{
				position = start213;
				goto mismatch202;
			}
		}
	match201:
		debug writefln("parse_SetToVar() PASS");
		auto value = MATCH_setToVar(bind_ident1,bind_ident2);
		return ResultT!(int)(value);
	mismatch202:
		position = start212;
		return ResultT!(int)();
	}

	/*
	
SetToFloat
	= int MATCH_setToFloat(char[] ident,float floatVal)
	::=  "set"  WS  Identifier:ident  WS  "to"  WS  Floatvalue:floatVal;

	*/
	public ResultT!(int) parse_SetToFloat(){
		debug writefln("parse_SetToFloat()");
		uint start214 = position;
		char[] bind_ident;
		float bind_floatVal;
		
		
		{//Expression
			uint start215 = position;
			if((terminal("set").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_ident) && parse_WS().success && terminal("to").success && parse_WS().success && parse_Floatvalue().assign!(float)(bind_floatVal))){
				clearErrors();
				goto match203;
			}else{
				position = start215;
				goto mismatch204;
			}
		}
	match203:
		debug writefln("parse_SetToFloat() PASS");
		auto value = MATCH_setToFloat(bind_ident,bind_floatVal);
		return ResultT!(int)(value);
	mismatch204:
		position = start214;
		return ResultT!(int)();
	}

	/*
	
SetToString
	= int MATCH_setToString(char[] ident,char[] stringVal)
	::=  "set"  WS  Identifier:ident  WS  "to"  WS  Stringvalue:stringVal;

	*/
	public ResultT!(int) parse_SetToString(){
		debug writefln("parse_SetToString()");
		uint start216 = position;
		char[] bind_ident;
		char[] bind_stringVal;
		
		
		{//Expression
			uint start217 = position;
			if((terminal("set").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_ident) && parse_WS().success && terminal("to").success && parse_WS().success && parse_Stringvalue().assign!(char[])(bind_stringVal))){
				clearErrors();
				goto match205;
			}else{
				position = start217;
				goto mismatch206;
			}
		}
	match205:
		debug writefln("parse_SetToString() PASS");
		auto value = MATCH_setToString(bind_ident,bind_stringVal);
		return ResultT!(int)(value);
	mismatch206:
		position = start216;
		return ResultT!(int)();
	}

	/*
	
SetToResult
	= int MATCH_setToResult(char[] ident,int type)
	::=  "set"  WS  Identifier:ident  WS  "to"  WS  Function:type;

	*/
	public ResultT!(int) parse_SetToResult(){
		debug writefln("parse_SetToResult()");
		uint start218 = position;
		char[] bind_ident;
		int bind_type;
		
		
		{//Expression
			uint start219 = position;
			if((terminal("set").success && parse_WS().success && parse_Identifier().assign!(char[])(bind_ident) && parse_WS().success && terminal("to").success && parse_WS().success && parse_Function().assign!(int)(bind_type))){
				clearErrors();
				goto match207;
			}else{
				position = start219;
				goto mismatch208;
			}
		}
	match207:
		debug writefln("parse_SetToResult() PASS");
		auto value = MATCH_setToResult(bind_ident,bind_type);
		return ResultT!(int)(value);
	mismatch208:
		position = start218;
		return ResultT!(int)();
	}

	/*
	
Inc
	::= (  IncVarByVar |  IncVarByFloat |  IncVarByLong);

	*/
	public ResultT!(bool) parse_Inc(){
		debug writefln("parse_Inc()");
		uint start220 = position;
		//no declarations
		
		
		{//Expression
			uint start221 = position;
			{//Expression
				uint start222 = position;
				if((parse_IncVarByVar().success) || (parse_IncVarByFloat().success) || (parse_IncVarByLong().success)){
					clearErrors();
				}else{
					setError("Expected IncVarByVar, IncVarByFloat or IncVarByLong.");
					position = start222;
					goto mismatch212;
				}
			}
			goto match211;
		mismatch212:
			{/*do nothing*/}
			position = start221;
			goto mismatch210;
		match211:
			clearErrors();
			goto match209;
		}
	match209:
		debug writefln("parse_Inc() PASS");
		return ResultT!(bool)(true);
	mismatch210:
		position = start220;
		return ResultT!(bool)();
	}

	/*
	
IncVarByVar
	= int MATCH_incVarByVar(char[] ident1,char[] ident2)
	::=  "inc"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2;

	*/
	public ResultT!(int) parse_IncVarByVar(){
		debug writefln("parse_IncVarByVar()");
		uint start223 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		
		
		{//Expression
			uint start224 = position;
			if(!(terminal("inc").success)){
				goto mismatch216;
			}
			if(!(parse_WS().success)){
				goto mismatch216;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch216;
			}
			{//OptionalExpr
				{//Expression
					uint start226 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start226;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch216;
			}
			{//OptionalExpr
				{//Expression
					uint start228 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start228;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch216;
			}
			goto match215;
		mismatch216:
			{/*do nothing*/}
			position = start224;
			goto mismatch214;
		match215:
			clearErrors();
			goto match213;
		}
	match213:
		debug writefln("parse_IncVarByVar() PASS");
		auto value = MATCH_incVarByVar(bind_ident1,bind_ident2);
		return ResultT!(int)(value);
	mismatch214:
		position = start223;
		return ResultT!(int)();
	}

	/*
	
IncVarByLong
	= int MATCH_incVarByLong(char[] ident1,int longVal)
	::=  "inc"  WS  Identifier:ident1 [  WS]  "," [  WS]  Longvalue:longVal;

	*/
	public ResultT!(int) parse_IncVarByLong(){
		debug writefln("parse_IncVarByLong()");
		uint start229 = position;
		char[] bind_ident1;
		int bind_longVal;
		
		
		{//Expression
			uint start230 = position;
			if(!(terminal("inc").success)){
				goto mismatch220;
			}
			if(!(parse_WS().success)){
				goto mismatch220;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch220;
			}
			{//OptionalExpr
				{//Expression
					uint start232 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start232;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch220;
			}
			{//OptionalExpr
				{//Expression
					uint start234 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start234;
					}
				}
			}
			if(!(parse_Longvalue().assign!(int)(bind_longVal))){
				goto mismatch220;
			}
			goto match219;
		mismatch220:
			{/*do nothing*/}
			position = start230;
			goto mismatch218;
		match219:
			clearErrors();
			goto match217;
		}
	match217:
		debug writefln("parse_IncVarByLong() PASS");
		auto value = MATCH_incVarByLong(bind_ident1,bind_longVal);
		return ResultT!(int)(value);
	mismatch218:
		position = start229;
		return ResultT!(int)();
	}

	/*
	
IncVarByFloat
	= int MATCH_incVarByFloat(char[] ident1,float floatVal)
	::=  "inc"  WS  Identifier:ident1 [  WS]  "," [  WS]  Floatvalue:floatVal;

	*/
	public ResultT!(int) parse_IncVarByFloat(){
		debug writefln("parse_IncVarByFloat()");
		uint start235 = position;
		char[] bind_ident1;
		float bind_floatVal;
		
		
		{//Expression
			uint start236 = position;
			if(!(terminal("inc").success)){
				goto mismatch224;
			}
			if(!(parse_WS().success)){
				goto mismatch224;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch224;
			}
			{//OptionalExpr
				{//Expression
					uint start238 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start238;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch224;
			}
			{//OptionalExpr
				{//Expression
					uint start240 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start240;
					}
				}
			}
			if(!(parse_Floatvalue().assign!(float)(bind_floatVal))){
				goto mismatch224;
			}
			goto match223;
		mismatch224:
			{/*do nothing*/}
			position = start236;
			goto mismatch222;
		match223:
			clearErrors();
			goto match221;
		}
	match221:
		debug writefln("parse_IncVarByFloat() PASS");
		auto value = MATCH_incVarByFloat(bind_ident1,bind_floatVal);
		return ResultT!(int)(value);
	mismatch222:
		position = start235;
		return ResultT!(int)();
	}

	/*
	
Add
	::= (  Addvarvar |  Addvarlong |  Addvarfloat);

	*/
	public ResultT!(bool) parse_Add(){
		debug writefln("parse_Add()");
		uint start241 = position;
		//no declarations
		
		
		{//Expression
			uint start242 = position;
			{//Expression
				uint start243 = position;
				if((parse_Addvarvar().success) || (parse_Addvarlong().success) || (parse_Addvarfloat().success)){
					clearErrors();
				}else{
					setError("Expected Addvarvar, Addvarlong or Addvarfloat.");
					position = start243;
					goto mismatch228;
				}
			}
			goto match227;
		mismatch228:
			{/*do nothing*/}
			position = start242;
			goto mismatch226;
		match227:
			clearErrors();
			goto match225;
		}
	match225:
		debug writefln("parse_Add() PASS");
		return ResultT!(bool)(true);
	mismatch226:
		position = start241;
		return ResultT!(bool)();
	}

	/*
	
Mul
	::= (  Mulvarvar |  Mulvarlong |  Mulvarfloat);

	*/
	public ResultT!(bool) parse_Mul(){
		debug writefln("parse_Mul()");
		uint start244 = position;
		//no declarations
		
		
		{//Expression
			uint start245 = position;
			{//Expression
				uint start246 = position;
				if((parse_Mulvarvar().success) || (parse_Mulvarlong().success) || (parse_Mulvarfloat().success)){
					clearErrors();
				}else{
					setError("Expected Mulvarvar, Mulvarlong or Mulvarfloat.");
					position = start246;
					goto mismatch232;
				}
			}
			goto match231;
		mismatch232:
			{/*do nothing*/}
			position = start245;
			goto mismatch230;
		match231:
			clearErrors();
			goto match229;
		}
	match229:
		debug writefln("parse_Mul() PASS");
		return ResultT!(bool)(true);
	mismatch230:
		position = start244;
		return ResultT!(bool)();
	}

	/*
	
Mulvarvar
	= int MATCH_mulVarVar(char[] ident1,char[] ident2,char[] ident3)
	::=  "mul"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2 [  WS]  "," [  WS]  Identifier:ident3;

	*/
	public ResultT!(int) parse_Mulvarvar(){
		debug writefln("parse_Mulvarvar()");
		uint start247 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		char[] bind_ident3;
		
		
		{//Expression
			uint start248 = position;
			if(!(terminal("mul").success)){
				goto mismatch236;
			}
			if(!(parse_WS().success)){
				goto mismatch236;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch236;
			}
			{//OptionalExpr
				{//Expression
					uint start250 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start250;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch236;
			}
			{//OptionalExpr
				{//Expression
					uint start252 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start252;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch236;
			}
			{//OptionalExpr
				{//Expression
					uint start254 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start254;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch236;
			}
			{//OptionalExpr
				{//Expression
					uint start256 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start256;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident3))){
				goto mismatch236;
			}
			goto match235;
		mismatch236:
			{/*do nothing*/}
			position = start248;
			goto mismatch234;
		match235:
			clearErrors();
			goto match233;
		}
	match233:
		debug writefln("parse_Mulvarvar() PASS");
		auto value = MATCH_mulVarVar(bind_ident1,bind_ident2,bind_ident3);
		return ResultT!(int)(value);
	mismatch234:
		position = start247;
		return ResultT!(int)();
	}

	/*
	
Mulvarlong
	= int MATCH_mulVarLong(char[] ident1,char[] ident2,int longVal)
	::=  "mul"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2 [  WS]  "," [  WS]  Longvalue:longVal;

	*/
	public ResultT!(int) parse_Mulvarlong(){
		debug writefln("parse_Mulvarlong()");
		uint start257 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		int bind_longVal;
		
		
		{//Expression
			uint start258 = position;
			if(!(terminal("mul").success)){
				goto mismatch240;
			}
			if(!(parse_WS().success)){
				goto mismatch240;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch240;
			}
			{//OptionalExpr
				{//Expression
					uint start260 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start260;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch240;
			}
			{//OptionalExpr
				{//Expression
					uint start262 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start262;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch240;
			}
			{//OptionalExpr
				{//Expression
					uint start264 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start264;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch240;
			}
			{//OptionalExpr
				{//Expression
					uint start266 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start266;
					}
				}
			}
			if(!(parse_Longvalue().assign!(int)(bind_longVal))){
				goto mismatch240;
			}
			goto match239;
		mismatch240:
			{/*do nothing*/}
			position = start258;
			goto mismatch238;
		match239:
			clearErrors();
			goto match237;
		}
	match237:
		debug writefln("parse_Mulvarlong() PASS");
		auto value = MATCH_mulVarLong(bind_ident1,bind_ident2,bind_longVal);
		return ResultT!(int)(value);
	mismatch238:
		position = start257;
		return ResultT!(int)();
	}

	/*
	
Mulvarfloat
	= int MATCH_mulVarFloat(char[] ident1,char[] ident2,float floatVal)
	::=  "mul"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2 [  WS]  "," [  WS]  Floatvalue:floatVal;

	*/
	public ResultT!(int) parse_Mulvarfloat(){
		debug writefln("parse_Mulvarfloat()");
		uint start267 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		float bind_floatVal;
		
		
		{//Expression
			uint start268 = position;
			if(!(terminal("mul").success)){
				goto mismatch244;
			}
			if(!(parse_WS().success)){
				goto mismatch244;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch244;
			}
			{//OptionalExpr
				{//Expression
					uint start270 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start270;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch244;
			}
			{//OptionalExpr
				{//Expression
					uint start272 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start272;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch244;
			}
			{//OptionalExpr
				{//Expression
					uint start274 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start274;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch244;
			}
			{//OptionalExpr
				{//Expression
					uint start276 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start276;
					}
				}
			}
			if(!(parse_Floatvalue().assign!(float)(bind_floatVal))){
				goto mismatch244;
			}
			goto match243;
		mismatch244:
			{/*do nothing*/}
			position = start268;
			goto mismatch242;
		match243:
			clearErrors();
			goto match241;
		}
	match241:
		debug writefln("parse_Mulvarfloat() PASS");
		auto value = MATCH_mulVarFloat(bind_ident1,bind_ident2,bind_floatVal);
		return ResultT!(int)(value);
	mismatch242:
		position = start267;
		return ResultT!(int)();
	}

	/*
	
Addvarvar
	= int MATCH_addVarVar(char[] ident1,char[] ident2,char[] ident3)
	::=  "add"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2 [  WS]  "," [  WS]  Identifier:ident3;

	*/
	public ResultT!(int) parse_Addvarvar(){
		debug writefln("parse_Addvarvar()");
		uint start277 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		char[] bind_ident3;
		
		
		{//Expression
			uint start278 = position;
			if(!(terminal("add").success)){
				goto mismatch248;
			}
			if(!(parse_WS().success)){
				goto mismatch248;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch248;
			}
			{//OptionalExpr
				{//Expression
					uint start280 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start280;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch248;
			}
			{//OptionalExpr
				{//Expression
					uint start282 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start282;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch248;
			}
			{//OptionalExpr
				{//Expression
					uint start284 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start284;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch248;
			}
			{//OptionalExpr
				{//Expression
					uint start286 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start286;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident3))){
				goto mismatch248;
			}
			goto match247;
		mismatch248:
			{/*do nothing*/}
			position = start278;
			goto mismatch246;
		match247:
			clearErrors();
			goto match245;
		}
	match245:
		debug writefln("parse_Addvarvar() PASS");
		auto value = MATCH_addVarVar(bind_ident1,bind_ident2,bind_ident3);
		return ResultT!(int)(value);
	mismatch246:
		position = start277;
		return ResultT!(int)();
	}

	/*
	
Addvarlong
	= int MATCH_addVarLong(char[] ident1,char[] ident2,int longVal)
	::=  "add"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2 [  WS]  "," [  WS]  Longvalue:longVal;

	*/
	public ResultT!(int) parse_Addvarlong(){
		debug writefln("parse_Addvarlong()");
		uint start287 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		int bind_longVal;
		
		
		{//Expression
			uint start288 = position;
			if(!(terminal("add").success)){
				goto mismatch252;
			}
			if(!(parse_WS().success)){
				goto mismatch252;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch252;
			}
			{//OptionalExpr
				{//Expression
					uint start290 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start290;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch252;
			}
			{//OptionalExpr
				{//Expression
					uint start292 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start292;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch252;
			}
			{//OptionalExpr
				{//Expression
					uint start294 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start294;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch252;
			}
			{//OptionalExpr
				{//Expression
					uint start296 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start296;
					}
				}
			}
			if(!(parse_Longvalue().assign!(int)(bind_longVal))){
				goto mismatch252;
			}
			goto match251;
		mismatch252:
			{/*do nothing*/}
			position = start288;
			goto mismatch250;
		match251:
			clearErrors();
			goto match249;
		}
	match249:
		debug writefln("parse_Addvarlong() PASS");
		auto value = MATCH_addVarLong(bind_ident1,bind_ident2,bind_longVal);
		return ResultT!(int)(value);
	mismatch250:
		position = start287;
		return ResultT!(int)();
	}

	/*
	
Addvarfloat
	= int MATCH_addVarFloat(char[] ident1,char[] ident2,float floatVal)
	::=  "add"  WS  Identifier:ident1 [  WS]  "," [  WS]  Identifier:ident2 [  WS]  "," [  WS]  Floatvalue:floatVal;

	*/
	public ResultT!(int) parse_Addvarfloat(){
		debug writefln("parse_Addvarfloat()");
		uint start297 = position;
		char[] bind_ident1;
		char[] bind_ident2;
		float bind_floatVal;
		
		
		{//Expression
			uint start298 = position;
			if(!(terminal("add").success)){
				goto mismatch256;
			}
			if(!(parse_WS().success)){
				goto mismatch256;
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident1))){
				goto mismatch256;
			}
			{//OptionalExpr
				{//Expression
					uint start300 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start300;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch256;
			}
			{//OptionalExpr
				{//Expression
					uint start302 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start302;
					}
				}
			}
			if(!(parse_Identifier().assign!(char[])(bind_ident2))){
				goto mismatch256;
			}
			{//OptionalExpr
				{//Expression
					uint start304 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start304;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch256;
			}
			{//OptionalExpr
				{//Expression
					uint start306 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start306;
					}
				}
			}
			if(!(parse_Floatvalue().assign!(float)(bind_floatVal))){
				goto mismatch256;
			}
			goto match255;
		mismatch256:
			{/*do nothing*/}
			position = start298;
			goto mismatch254;
		match255:
			clearErrors();
			goto match253;
		}
	match253:
		debug writefln("parse_Addvarfloat() PASS");
		auto value = MATCH_addVarFloat(bind_ident1,bind_ident2,bind_floatVal);
		return ResultT!(int)(value);
	mismatch254:
		position = start297;
		return ResultT!(int)();
	}

	/*
	
Function
	= int type
	::=  DisplayMessage:type |  GetTemplate:type |  CreateWeapon:type |  CreateArmor:type |  CreateBook:type |  CreateClothing:type |  SetTemplateName:type |  AddItem:type |  GetButtonPressed:type |  GetTextInput:type |  ShowInputBox:type |  GetPCSneaking:type |  SetBookMultiplier:type |  SetMiscMultiplier:type |  SetArmorMultiplier:type |  SetWeaponMultiplier:type |  SetClothingMultiplier:type |  SetIngredientMultiplier:type |  GetScript:type |  StartScript:type |  StopScript:type |  IsRunning:type |  KeyPressed:type |  EnterMenuMode:type |  LeaveMenuMode:type |  SetSlashDamage:type |  SetSlashMin:type |  SetSlashMax:type |  GetSlashMin:type |  GetWeaponMultiplier:type |  GetSlashMax:type;

	*/
	public ResultT!(int) parse_Function(){
		debug writefln("parse_Function()");
		uint start307 = position;
		int bind_type;
		
		
		{//Expression
			uint start308 = position;
			if((parse_DisplayMessage().assign!(int)(bind_type)) || (parse_GetTemplate().assign!(int)(bind_type)) || (parse_CreateWeapon().assign!(int)(bind_type)) || (parse_CreateArmor().assign!(int)(bind_type)) || (parse_CreateBook().assign!(int)(bind_type)) || (parse_CreateClothing().assign!(int)(bind_type)) || (parse_SetTemplateName().assign!(int)(bind_type)) || (parse_AddItem().assign!(int)(bind_type)) || (parse_GetButtonPressed().assign!(int)(bind_type)) || (parse_GetTextInput().assign!(int)(bind_type)) || (parse_ShowInputBox().assign!(int)(bind_type)) || (parse_GetPCSneaking().assign!(int)(bind_type)) || (parse_SetBookMultiplier().assign!(int)(bind_type)) || (parse_SetMiscMultiplier().assign!(int)(bind_type)) || (parse_SetArmorMultiplier().assign!(int)(bind_type)) || (parse_SetWeaponMultiplier().assign!(int)(bind_type)) || (parse_SetClothingMultiplier().assign!(int)(bind_type)) || (parse_SetIngredientMultiplier().assign!(int)(bind_type)) || (parse_GetScript().assign!(int)(bind_type)) || (parse_StartScript().assign!(int)(bind_type)) || (parse_StopScript().assign!(int)(bind_type)) || (parse_IsRunning().assign!(int)(bind_type)) || (parse_KeyPressed().assign!(int)(bind_type)) || (parse_EnterMenuMode().assign!(int)(bind_type)) || (parse_LeaveMenuMode().assign!(int)(bind_type)) || (parse_SetSlashDamage().assign!(int)(bind_type)) || (parse_SetSlashMin().assign!(int)(bind_type)) || (parse_SetSlashMax().assign!(int)(bind_type)) || (parse_GetSlashMin().assign!(int)(bind_type)) || (parse_GetWeaponMultiplier().assign!(int)(bind_type)) || (parse_GetSlashMax().assign!(int)(bind_type))){
				clearErrors();
				goto match257;
			}else{
				setError("Expected DisplayMessage, GetTemplate, CreateWeapon, CreateArmor, CreateBook, CreateClothing, SetTemplateName, AddItem, GetButtonPressed, GetTextInput, ShowInputBox, GetPCSneaking, SetBookMultiplier, SetMiscMultiplier, SetArmorMultiplier, SetWeaponMultiplier, SetClothingMultiplier, SetIngredientMultiplier, GetScript, StartScript, StopScript, IsRunning, KeyPressed, EnterMenuMode, LeaveMenuMode, SetSlashDamage, SetSlashMin, SetSlashMax, GetSlashMin, GetWeaponMultiplier or GetSlashMax.");
				position = start308;
				goto mismatch258;
			}
		}
	match257:
		debug writefln("parse_Function() PASS");
		return ResultT!(int)(bind_type);
	mismatch258:
		position = start307;
		return ResultT!(int)();
	}

	/*
	
GetWeaponMultiplier
	= int MATCH_GetWeaponMultiplier()
	::=  "GetWeaponMultiplier" [  WS]  "(" [  WS]  ")";

	*/
	public ResultT!(int) parse_GetWeaponMultiplier(){
		debug writefln("parse_GetWeaponMultiplier()");
		uint start309 = position;
		
		
		{//Expression
			uint start310 = position;
			if(!(terminal("GetWeaponMultiplier").success)){
				goto mismatch262;
			}
			{//OptionalExpr
				{//Expression
					uint start312 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start312;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch262;
			}
			{//OptionalExpr
				{//Expression
					uint start314 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start314;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch262;
			}
			goto match261;
		mismatch262:
			{/*do nothing*/}
			position = start310;
			goto mismatch260;
		match261:
			clearErrors();
			goto match259;
		}
	match259:
		debug writefln("parse_GetWeaponMultiplier() PASS");
		auto value = MATCH_GetWeaponMultiplier();
		return ResultT!(int)(value);
	mismatch260:
		position = start309;
		return ResultT!(int)();
	}

	/*
	
SetSlashDamage
	= int MATCH_SetSlashDamage(Parameter weaponTemplate,Parameter min,Parameter max)
	::=  "SetSlashDamage" [  WS]  "(" [  WS]  LongParameter:weaponTemplate [  WS]  "," [  WS]  LongParameter:min [  WS]  "," [  WS]  LongParameter:max [  WS]  ")";

	*/
	public ResultT!(int) parse_SetSlashDamage(){
		debug writefln("parse_SetSlashDamage()");
		uint start315 = position;
		Parameter bind_weaponTemplate;
		Parameter bind_min;
		Parameter bind_max;
		
		
		{//Expression
			uint start316 = position;
			if(!(terminal("SetSlashDamage").success)){
				goto mismatch266;
			}
			{//OptionalExpr
				{//Expression
					uint start318 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start318;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch266;
			}
			{//OptionalExpr
				{//Expression
					uint start320 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start320;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_weaponTemplate))){
				goto mismatch266;
			}
			{//OptionalExpr
				{//Expression
					uint start322 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start322;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch266;
			}
			{//OptionalExpr
				{//Expression
					uint start324 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start324;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_min))){
				goto mismatch266;
			}
			{//OptionalExpr
				{//Expression
					uint start326 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start326;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch266;
			}
			{//OptionalExpr
				{//Expression
					uint start328 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start328;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_max))){
				goto mismatch266;
			}
			{//OptionalExpr
				{//Expression
					uint start330 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start330;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch266;
			}
			goto match265;
		mismatch266:
			{/*do nothing*/}
			position = start316;
			goto mismatch264;
		match265:
			clearErrors();
			goto match263;
		}
	match263:
		debug writefln("parse_SetSlashDamage() PASS");
		auto value = MATCH_SetSlashDamage(bind_weaponTemplate,bind_min,bind_max);
		return ResultT!(int)(value);
	mismatch264:
		position = start315;
		return ResultT!(int)();
	}

	/*
	
SetSlashMin
	= int MATCH_SetSlashMin(Parameter weaponTemplate,Parameter min)
	::=  "SetSlashMin" [  WS]  "(" [  WS]  LongParameter:weaponTemplate [  WS]  "," [  WS]  LongParameter:min [  WS]  ")";

	*/
	public ResultT!(int) parse_SetSlashMin(){
		debug writefln("parse_SetSlashMin()");
		uint start331 = position;
		Parameter bind_weaponTemplate;
		Parameter bind_min;
		
		
		{//Expression
			uint start332 = position;
			if(!(terminal("SetSlashMin").success)){
				goto mismatch270;
			}
			{//OptionalExpr
				{//Expression
					uint start334 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start334;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch270;
			}
			{//OptionalExpr
				{//Expression
					uint start336 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start336;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_weaponTemplate))){
				goto mismatch270;
			}
			{//OptionalExpr
				{//Expression
					uint start338 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start338;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch270;
			}
			{//OptionalExpr
				{//Expression
					uint start340 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start340;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_min))){
				goto mismatch270;
			}
			{//OptionalExpr
				{//Expression
					uint start342 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start342;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch270;
			}
			goto match269;
		mismatch270:
			{/*do nothing*/}
			position = start332;
			goto mismatch268;
		match269:
			clearErrors();
			goto match267;
		}
	match267:
		debug writefln("parse_SetSlashMin() PASS");
		auto value = MATCH_SetSlashMin(bind_weaponTemplate,bind_min);
		return ResultT!(int)(value);
	mismatch268:
		position = start331;
		return ResultT!(int)();
	}

	/*
	
SetSlashMax
	= int MATCH_SetSlashMax(Parameter weaponTemplate,Parameter min)
	::=  "SetSlashMax" [  WS]  "(" [  WS]  LongParameter:weaponTemplate [  WS]  "," [  WS]  LongParameter:min [  WS]  ")";

	*/
	public ResultT!(int) parse_SetSlashMax(){
		debug writefln("parse_SetSlashMax()");
		uint start343 = position;
		Parameter bind_weaponTemplate;
		Parameter bind_min;
		
		
		{//Expression
			uint start344 = position;
			if(!(terminal("SetSlashMax").success)){
				goto mismatch274;
			}
			{//OptionalExpr
				{//Expression
					uint start346 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start346;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch274;
			}
			{//OptionalExpr
				{//Expression
					uint start348 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start348;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_weaponTemplate))){
				goto mismatch274;
			}
			{//OptionalExpr
				{//Expression
					uint start350 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start350;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch274;
			}
			{//OptionalExpr
				{//Expression
					uint start352 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start352;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_min))){
				goto mismatch274;
			}
			{//OptionalExpr
				{//Expression
					uint start354 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start354;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch274;
			}
			goto match273;
		mismatch274:
			{/*do nothing*/}
			position = start344;
			goto mismatch272;
		match273:
			clearErrors();
			goto match271;
		}
	match271:
		debug writefln("parse_SetSlashMax() PASS");
		auto value = MATCH_SetSlashMax(bind_weaponTemplate,bind_min);
		return ResultT!(int)(value);
	mismatch272:
		position = start343;
		return ResultT!(int)();
	}

	/*
	
GetSlashMax
	= int MATCH_GetSlashMax(Parameter weaponTemplate)
	::=  "GetSlashMax" [  WS]  "(" [  WS]  LongParameter:weaponTemplate [  WS]  ")";

	*/
	public ResultT!(int) parse_GetSlashMax(){
		debug writefln("parse_GetSlashMax()");
		uint start355 = position;
		Parameter bind_weaponTemplate;
		
		
		{//Expression
			uint start356 = position;
			if(!(terminal("GetSlashMax").success)){
				goto mismatch278;
			}
			{//OptionalExpr
				{//Expression
					uint start358 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start358;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch278;
			}
			{//OptionalExpr
				{//Expression
					uint start360 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start360;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_weaponTemplate))){
				goto mismatch278;
			}
			{//OptionalExpr
				{//Expression
					uint start362 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start362;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch278;
			}
			goto match277;
		mismatch278:
			{/*do nothing*/}
			position = start356;
			goto mismatch276;
		match277:
			clearErrors();
			goto match275;
		}
	match275:
		debug writefln("parse_GetSlashMax() PASS");
		auto value = MATCH_GetSlashMax(bind_weaponTemplate);
		return ResultT!(int)(value);
	mismatch276:
		position = start355;
		return ResultT!(int)();
	}

	/*
	
GetSlashMin
	= int MATCH_GetSlashMin(Parameter weaponTemplate)
	::=  "GetSlashMin" [  WS]  "(" [  WS]  LongParameter:weaponTemplate [  WS]  ")";

	*/
	public ResultT!(int) parse_GetSlashMin(){
		debug writefln("parse_GetSlashMin()");
		uint start363 = position;
		Parameter bind_weaponTemplate;
		
		
		{//Expression
			uint start364 = position;
			if(!(terminal("GetSlashMin").success)){
				goto mismatch282;
			}
			{//OptionalExpr
				{//Expression
					uint start366 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start366;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch282;
			}
			{//OptionalExpr
				{//Expression
					uint start368 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start368;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_weaponTemplate))){
				goto mismatch282;
			}
			{//OptionalExpr
				{//Expression
					uint start370 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start370;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch282;
			}
			goto match281;
		mismatch282:
			{/*do nothing*/}
			position = start364;
			goto mismatch280;
		match281:
			clearErrors();
			goto match279;
		}
	match279:
		debug writefln("parse_GetSlashMin() PASS");
		auto value = MATCH_GetSlashMin(bind_weaponTemplate);
		return ResultT!(int)(value);
	mismatch280:
		position = start363;
		return ResultT!(int)();
	}

	/*
	
EnterMenuMode
	= int MATCH_EnterMenuMode()
	::=  "EnterMenuMode" [  WS]  "(" [  WS]  ")";

	*/
	public ResultT!(int) parse_EnterMenuMode(){
		debug writefln("parse_EnterMenuMode()");
		uint start371 = position;
		
		
		{//Expression
			uint start372 = position;
			if(!(terminal("EnterMenuMode").success)){
				goto mismatch286;
			}
			{//OptionalExpr
				{//Expression
					uint start374 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start374;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch286;
			}
			{//OptionalExpr
				{//Expression
					uint start376 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start376;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch286;
			}
			goto match285;
		mismatch286:
			{/*do nothing*/}
			position = start372;
			goto mismatch284;
		match285:
			clearErrors();
			goto match283;
		}
	match283:
		debug writefln("parse_EnterMenuMode() PASS");
		auto value = MATCH_EnterMenuMode();
		return ResultT!(int)(value);
	mismatch284:
		position = start371;
		return ResultT!(int)();
	}

	/*
	
LeaveMenuMode
	= int MATCH_LeaveMenuMode()
	::=  "LeaveMenuMode" [  WS]  "(" [  WS]  ")";

	*/
	public ResultT!(int) parse_LeaveMenuMode(){
		debug writefln("parse_LeaveMenuMode()");
		uint start377 = position;
		
		
		{//Expression
			uint start378 = position;
			if(!(terminal("LeaveMenuMode").success)){
				goto mismatch290;
			}
			{//OptionalExpr
				{//Expression
					uint start380 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start380;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch290;
			}
			{//OptionalExpr
				{//Expression
					uint start382 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start382;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch290;
			}
			goto match289;
		mismatch290:
			{/*do nothing*/}
			position = start378;
			goto mismatch288;
		match289:
			clearErrors();
			goto match287;
		}
	match287:
		debug writefln("parse_LeaveMenuMode() PASS");
		auto value = MATCH_LeaveMenuMode();
		return ResultT!(int)(value);
	mismatch288:
		position = start377;
		return ResultT!(int)();
	}

	/*
	
KeyPressed
	= int MATCH_KeyPressed(Parameter keyCode)
	::=  "KeyPressed" [  WS]  "(" [  WS]  LongParameter:keyCode [  WS]  ")";

	*/
	public ResultT!(int) parse_KeyPressed(){
		debug writefln("parse_KeyPressed()");
		uint start383 = position;
		Parameter bind_keyCode;
		
		
		{//Expression
			uint start384 = position;
			if(!(terminal("KeyPressed").success)){
				goto mismatch294;
			}
			{//OptionalExpr
				{//Expression
					uint start386 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start386;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch294;
			}
			{//OptionalExpr
				{//Expression
					uint start388 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start388;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_keyCode))){
				goto mismatch294;
			}
			{//OptionalExpr
				{//Expression
					uint start390 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start390;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch294;
			}
			goto match293;
		mismatch294:
			{/*do nothing*/}
			position = start384;
			goto mismatch292;
		match293:
			clearErrors();
			goto match291;
		}
	match291:
		debug writefln("parse_KeyPressed() PASS");
		auto value = MATCH_KeyPressed(bind_keyCode);
		return ResultT!(int)(value);
	mismatch292:
		position = start383;
		return ResultT!(int)();
	}

	/*
	
IsRunning
	= int MATCH_IsRunning(Parameter scriptAddress)
	::=  "IsRunning" [  WS]  "(" [  WS]  LongParameter:scriptAddress [  WS]  ")";

	*/
	public ResultT!(int) parse_IsRunning(){
		debug writefln("parse_IsRunning()");
		uint start391 = position;
		Parameter bind_scriptAddress;
		
		
		{//Expression
			uint start392 = position;
			if(!(terminal("IsRunning").success)){
				goto mismatch298;
			}
			{//OptionalExpr
				{//Expression
					uint start394 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start394;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch298;
			}
			{//OptionalExpr
				{//Expression
					uint start396 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start396;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_scriptAddress))){
				goto mismatch298;
			}
			{//OptionalExpr
				{//Expression
					uint start398 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start398;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch298;
			}
			goto match297;
		mismatch298:
			{/*do nothing*/}
			position = start392;
			goto mismatch296;
		match297:
			clearErrors();
			goto match295;
		}
	match295:
		debug writefln("parse_IsRunning() PASS");
		auto value = MATCH_IsRunning(bind_scriptAddress);
		return ResultT!(int)(value);
	mismatch296:
		position = start391;
		return ResultT!(int)();
	}

	/*
	
GetScript
	= int MATCH_GetScript(Parameter scriptName)
	::=  "GetScript" [  WS]  "(" [  WS]  StringParameter:scriptName [  WS]  ")";

	*/
	public ResultT!(int) parse_GetScript(){
		debug writefln("parse_GetScript()");
		uint start399 = position;
		Parameter bind_scriptName;
		
		
		{//Expression
			uint start400 = position;
			if(!(terminal("GetScript").success)){
				goto mismatch302;
			}
			{//OptionalExpr
				{//Expression
					uint start402 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start402;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch302;
			}
			{//OptionalExpr
				{//Expression
					uint start404 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start404;
					}
				}
			}
			if(!(parse_StringParameter().assign!(Parameter)(bind_scriptName))){
				goto mismatch302;
			}
			{//OptionalExpr
				{//Expression
					uint start406 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start406;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch302;
			}
			goto match301;
		mismatch302:
			{/*do nothing*/}
			position = start400;
			goto mismatch300;
		match301:
			clearErrors();
			goto match299;
		}
	match299:
		debug writefln("parse_GetScript() PASS");
		auto value = MATCH_GetScript(bind_scriptName);
		return ResultT!(int)(value);
	mismatch300:
		position = start399;
		return ResultT!(int)();
	}

	/*
	
StopScript
	= int MATCH_StopScript(Parameter scriptAddress,Parameter resetVars)
	::=  "StopScript" [  WS]  "(" [  WS]  LongParameter:scriptAddress [  WS]  "," [  WS]  LongParameter:resetVars [  WS]  ")";

	*/
	public ResultT!(int) parse_StopScript(){
		debug writefln("parse_StopScript()");
		uint start407 = position;
		Parameter bind_scriptAddress;
		Parameter bind_resetVars;
		
		
		{//Expression
			uint start408 = position;
			if(!(terminal("StopScript").success)){
				goto mismatch306;
			}
			{//OptionalExpr
				{//Expression
					uint start410 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start410;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch306;
			}
			{//OptionalExpr
				{//Expression
					uint start412 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start412;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_scriptAddress))){
				goto mismatch306;
			}
			{//OptionalExpr
				{//Expression
					uint start414 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start414;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch306;
			}
			{//OptionalExpr
				{//Expression
					uint start416 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start416;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_resetVars))){
				goto mismatch306;
			}
			{//OptionalExpr
				{//Expression
					uint start418 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start418;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch306;
			}
			goto match305;
		mismatch306:
			{/*do nothing*/}
			position = start408;
			goto mismatch304;
		match305:
			clearErrors();
			goto match303;
		}
	match303:
		debug writefln("parse_StopScript() PASS");
		auto value = MATCH_StopScript(bind_scriptAddress,bind_resetVars);
		return ResultT!(int)(value);
	mismatch304:
		position = start407;
		return ResultT!(int)();
	}

	/*
	
StartScript
	= int MATCH_StartScript(Parameter scriptAddress,Parameter resetVars)
	::=  "StartScript" [  WS]  "(" [  WS]  LongParameter:scriptAddress [  WS]  "," [  WS]  LongParameter:resetVars [  WS]  ")";

	*/
	public ResultT!(int) parse_StartScript(){
		debug writefln("parse_StartScript()");
		uint start419 = position;
		Parameter bind_scriptAddress;
		Parameter bind_resetVars;
		
		
		{//Expression
			uint start420 = position;
			if(!(terminal("StartScript").success)){
				goto mismatch310;
			}
			{//OptionalExpr
				{//Expression
					uint start422 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start422;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch310;
			}
			{//OptionalExpr
				{//Expression
					uint start424 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start424;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_scriptAddress))){
				goto mismatch310;
			}
			{//OptionalExpr
				{//Expression
					uint start426 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start426;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch310;
			}
			{//OptionalExpr
				{//Expression
					uint start428 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start428;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_resetVars))){
				goto mismatch310;
			}
			{//OptionalExpr
				{//Expression
					uint start430 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start430;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch310;
			}
			goto match309;
		mismatch310:
			{/*do nothing*/}
			position = start420;
			goto mismatch308;
		match309:
			clearErrors();
			goto match307;
		}
	match307:
		debug writefln("parse_StartScript() PASS");
		auto value = MATCH_StartScript(bind_scriptAddress,bind_resetVars);
		return ResultT!(int)(value);
	mismatch308:
		position = start419;
		return ResultT!(int)();
	}

	/*
	
GetPCSneaking
	= int MATCH_GetPCSneaking()
	::=  "GetPCSneaking" [  WS]  "(" [  WS]  ")";

	*/
	public ResultT!(int) parse_GetPCSneaking(){
		debug writefln("parse_GetPCSneaking()");
		uint start431 = position;
		
		
		{//Expression
			uint start432 = position;
			if(!(terminal("GetPCSneaking").success)){
				goto mismatch314;
			}
			{//OptionalExpr
				{//Expression
					uint start434 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start434;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch314;
			}
			{//OptionalExpr
				{//Expression
					uint start436 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start436;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch314;
			}
			goto match313;
		mismatch314:
			{/*do nothing*/}
			position = start432;
			goto mismatch312;
		match313:
			clearErrors();
			goto match311;
		}
	match311:
		debug writefln("parse_GetPCSneaking() PASS");
		auto value = MATCH_GetPCSneaking();
		return ResultT!(int)(value);
	mismatch312:
		position = start431;
		return ResultT!(int)();
	}

	/*
	
AddItem
	= int MATCH_AddItem(Parameter container,Parameter item,Parameter itemCount)
	::=  "AddItem" [  WS]  "(" [  WS]  LongParameter:container [  WS]  "," [  WS]  LongParameter:item [  WS]  "," [  WS]  LongParameter:itemCount [  WS]  ")";

	*/
	public ResultT!(int) parse_AddItem(){
		debug writefln("parse_AddItem()");
		uint start437 = position;
		Parameter bind_container;
		Parameter bind_item;
		Parameter bind_itemCount;
		
		
		{//Expression
			uint start438 = position;
			if(!(terminal("AddItem").success)){
				goto mismatch318;
			}
			{//OptionalExpr
				{//Expression
					uint start440 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start440;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch318;
			}
			{//OptionalExpr
				{//Expression
					uint start442 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start442;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_container))){
				goto mismatch318;
			}
			{//OptionalExpr
				{//Expression
					uint start444 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start444;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch318;
			}
			{//OptionalExpr
				{//Expression
					uint start446 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start446;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_item))){
				goto mismatch318;
			}
			{//OptionalExpr
				{//Expression
					uint start448 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start448;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch318;
			}
			{//OptionalExpr
				{//Expression
					uint start450 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start450;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_itemCount))){
				goto mismatch318;
			}
			{//OptionalExpr
				{//Expression
					uint start452 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start452;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch318;
			}
			goto match317;
		mismatch318:
			{/*do nothing*/}
			position = start438;
			goto mismatch316;
		match317:
			clearErrors();
			goto match315;
		}
	match315:
		debug writefln("parse_AddItem() PASS");
		auto value = MATCH_AddItem(bind_container,bind_item,bind_itemCount);
		return ResultT!(int)(value);
	mismatch316:
		position = start437;
		return ResultT!(int)();
	}

	/*
	
SetTemplateName
	= int MATCH_SetTemplateName(Parameter template,Parameter name)
	::=  "SetTemplateName" [  WS]  "(" [  WS]  LongParameter:template [  WS]  "," [  WS]  StringParameter:name [  WS]  ")";

	*/
	public ResultT!(int) parse_SetTemplateName(){
		debug writefln("parse_SetTemplateName()");
		uint start453 = position;
		Parameter bind_template;
		Parameter bind_name;
		
		
		{//Expression
			uint start454 = position;
			if(!(terminal("SetTemplateName").success)){
				goto mismatch322;
			}
			{//OptionalExpr
				{//Expression
					uint start456 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start456;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch322;
			}
			{//OptionalExpr
				{//Expression
					uint start458 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start458;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_template))){
				goto mismatch322;
			}
			{//OptionalExpr
				{//Expression
					uint start460 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start460;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch322;
			}
			{//OptionalExpr
				{//Expression
					uint start462 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start462;
					}
				}
			}
			if(!(parse_StringParameter().assign!(Parameter)(bind_name))){
				goto mismatch322;
			}
			{//OptionalExpr
				{//Expression
					uint start464 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start464;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch322;
			}
			goto match321;
		mismatch322:
			{/*do nothing*/}
			position = start454;
			goto mismatch320;
		match321:
			clearErrors();
			goto match319;
		}
	match319:
		debug writefln("parse_SetTemplateName() PASS");
		auto value = MATCH_SetTemplateName(bind_template,bind_name);
		return ResultT!(int)(value);
	mismatch320:
		position = start453;
		return ResultT!(int)();
	}

	/*
	
GetButtonPressed
	= int MATCH_GetButtonPressed()
	::=  "GetButtonPressed" [  WS]  "(" [  WS]  ")";

	*/
	public ResultT!(int) parse_GetButtonPressed(){
		debug writefln("parse_GetButtonPressed()");
		uint start465 = position;
		
		
		{//Expression
			uint start466 = position;
			if(!(terminal("GetButtonPressed").success)){
				goto mismatch326;
			}
			{//OptionalExpr
				{//Expression
					uint start468 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start468;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch326;
			}
			{//OptionalExpr
				{//Expression
					uint start470 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start470;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch326;
			}
			goto match325;
		mismatch326:
			{/*do nothing*/}
			position = start466;
			goto mismatch324;
		match325:
			clearErrors();
			goto match323;
		}
	match323:
		debug writefln("parse_GetButtonPressed() PASS");
		auto value = MATCH_GetButtonPressed();
		return ResultT!(int)(value);
	mismatch324:
		position = start465;
		return ResultT!(int)();
	}

	/*
	
GetTextInput
	= int MATCH_GetTextInput()
	::=  "GetTextInput" [  WS]  "(" [  WS]  ")";

	*/
	public ResultT!(int) parse_GetTextInput(){
		debug writefln("parse_GetTextInput()");
		uint start471 = position;
		
		
		{//Expression
			uint start472 = position;
			if(!(terminal("GetTextInput").success)){
				goto mismatch330;
			}
			{//OptionalExpr
				{//Expression
					uint start474 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start474;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch330;
			}
			{//OptionalExpr
				{//Expression
					uint start476 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start476;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch330;
			}
			goto match329;
		mismatch330:
			{/*do nothing*/}
			position = start472;
			goto mismatch328;
		match329:
			clearErrors();
			goto match327;
		}
	match327:
		debug writefln("parse_GetTextInput() PASS");
		auto value = MATCH_GetTextInput();
		return ResultT!(int)(value);
	mismatch328:
		position = start471;
		return ResultT!(int)();
	}

	/*
	
SetBookMultiplier
	= int MATCH_SetBookMultiplier(Parameter mult)
	::=  "SetBookMultiplier" [  WS]  "(" [  WS]  FloatParameter:mult [  WS]  ")";

	*/
	public ResultT!(int) parse_SetBookMultiplier(){
		debug writefln("parse_SetBookMultiplier()");
		uint start477 = position;
		Parameter bind_mult;
		
		
		{//Expression
			uint start478 = position;
			if(!(terminal("SetBookMultiplier").success)){
				goto mismatch334;
			}
			{//OptionalExpr
				{//Expression
					uint start480 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start480;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch334;
			}
			{//OptionalExpr
				{//Expression
					uint start482 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start482;
					}
				}
			}
			if(!(parse_FloatParameter().assign!(Parameter)(bind_mult))){
				goto mismatch334;
			}
			{//OptionalExpr
				{//Expression
					uint start484 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start484;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch334;
			}
			goto match333;
		mismatch334:
			{/*do nothing*/}
			position = start478;
			goto mismatch332;
		match333:
			clearErrors();
			goto match331;
		}
	match331:
		debug writefln("parse_SetBookMultiplier() PASS");
		auto value = MATCH_SetBookMultiplier(bind_mult);
		return ResultT!(int)(value);
	mismatch332:
		position = start477;
		return ResultT!(int)();
	}

	/*
	
SetArmorMultiplier
	= int MATCH_SetArmorMultiplier(Parameter mult)
	::=  "SetArmorMultiplier" [  WS]  "(" [  WS]  FloatParameter:mult [  WS]  ")";

	*/
	public ResultT!(int) parse_SetArmorMultiplier(){
		debug writefln("parse_SetArmorMultiplier()");
		uint start485 = position;
		Parameter bind_mult;
		
		
		{//Expression
			uint start486 = position;
			if(!(terminal("SetArmorMultiplier").success)){
				goto mismatch338;
			}
			{//OptionalExpr
				{//Expression
					uint start488 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start488;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch338;
			}
			{//OptionalExpr
				{//Expression
					uint start490 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start490;
					}
				}
			}
			if(!(parse_FloatParameter().assign!(Parameter)(bind_mult))){
				goto mismatch338;
			}
			{//OptionalExpr
				{//Expression
					uint start492 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start492;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch338;
			}
			goto match337;
		mismatch338:
			{/*do nothing*/}
			position = start486;
			goto mismatch336;
		match337:
			clearErrors();
			goto match335;
		}
	match335:
		debug writefln("parse_SetArmorMultiplier() PASS");
		auto value = MATCH_SetArmorMultiplier(bind_mult);
		return ResultT!(int)(value);
	mismatch336:
		position = start485;
		return ResultT!(int)();
	}

	/*
	
SetWeaponMultiplier
	= int MATCH_SetWeaponMultiplier(Parameter mult)
	::=  "SetWeaponMultiplier" [  WS]  "(" [  WS]  FloatParameter:mult [  WS]  ")";

	*/
	public ResultT!(int) parse_SetWeaponMultiplier(){
		debug writefln("parse_SetWeaponMultiplier()");
		uint start493 = position;
		Parameter bind_mult;
		
		
		{//Expression
			uint start494 = position;
			if(!(terminal("SetWeaponMultiplier").success)){
				goto mismatch342;
			}
			{//OptionalExpr
				{//Expression
					uint start496 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start496;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch342;
			}
			{//OptionalExpr
				{//Expression
					uint start498 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start498;
					}
				}
			}
			if(!(parse_FloatParameter().assign!(Parameter)(bind_mult))){
				goto mismatch342;
			}
			{//OptionalExpr
				{//Expression
					uint start500 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start500;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch342;
			}
			goto match341;
		mismatch342:
			{/*do nothing*/}
			position = start494;
			goto mismatch340;
		match341:
			clearErrors();
			goto match339;
		}
	match339:
		debug writefln("parse_SetWeaponMultiplier() PASS");
		auto value = MATCH_SetWeaponMultiplier(bind_mult);
		return ResultT!(int)(value);
	mismatch340:
		position = start493;
		return ResultT!(int)();
	}

	/*
	
SetClothingMultiplier
	= int MATCH_SetClothingMultiplier(Parameter mult)
	::=  "SetClothingMultiplier" [  WS]  "(" [  WS]  FloatParameter:mult [  WS]  ")";

	*/
	public ResultT!(int) parse_SetClothingMultiplier(){
		debug writefln("parse_SetClothingMultiplier()");
		uint start501 = position;
		Parameter bind_mult;
		
		
		{//Expression
			uint start502 = position;
			if(!(terminal("SetClothingMultiplier").success)){
				goto mismatch346;
			}
			{//OptionalExpr
				{//Expression
					uint start504 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start504;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch346;
			}
			{//OptionalExpr
				{//Expression
					uint start506 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start506;
					}
				}
			}
			if(!(parse_FloatParameter().assign!(Parameter)(bind_mult))){
				goto mismatch346;
			}
			{//OptionalExpr
				{//Expression
					uint start508 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start508;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch346;
			}
			goto match345;
		mismatch346:
			{/*do nothing*/}
			position = start502;
			goto mismatch344;
		match345:
			clearErrors();
			goto match343;
		}
	match343:
		debug writefln("parse_SetClothingMultiplier() PASS");
		auto value = MATCH_SetClothingMultiplier(bind_mult);
		return ResultT!(int)(value);
	mismatch344:
		position = start501;
		return ResultT!(int)();
	}

	/*
	
SetMiscMultiplier
	= int MATCH_SetMiscMultiplier(Parameter mult)
	::=  "SetMiscMultiplier" [  WS]  "(" [  WS]  FloatParameter:mult [  WS]  ")";

	*/
	public ResultT!(int) parse_SetMiscMultiplier(){
		debug writefln("parse_SetMiscMultiplier()");
		uint start509 = position;
		Parameter bind_mult;
		
		
		{//Expression
			uint start510 = position;
			if(!(terminal("SetMiscMultiplier").success)){
				goto mismatch350;
			}
			{//OptionalExpr
				{//Expression
					uint start512 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start512;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch350;
			}
			{//OptionalExpr
				{//Expression
					uint start514 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start514;
					}
				}
			}
			if(!(parse_FloatParameter().assign!(Parameter)(bind_mult))){
				goto mismatch350;
			}
			{//OptionalExpr
				{//Expression
					uint start516 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start516;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch350;
			}
			goto match349;
		mismatch350:
			{/*do nothing*/}
			position = start510;
			goto mismatch348;
		match349:
			clearErrors();
			goto match347;
		}
	match347:
		debug writefln("parse_SetMiscMultiplier() PASS");
		auto value = MATCH_SetMiscMultiplier(bind_mult);
		return ResultT!(int)(value);
	mismatch348:
		position = start509;
		return ResultT!(int)();
	}

	/*
	
SetIngredientMultiplier
	= int MATCH_SetIngredientMultiplier(Parameter mult)
	::=  "SetIngredientMultiplier" [  WS]  "(" [  WS]  FloatParameter:mult [  WS]  ")";

	*/
	public ResultT!(int) parse_SetIngredientMultiplier(){
		debug writefln("parse_SetIngredientMultiplier()");
		uint start517 = position;
		Parameter bind_mult;
		
		
		{//Expression
			uint start518 = position;
			if(!(terminal("SetIngredientMultiplier").success)){
				goto mismatch354;
			}
			{//OptionalExpr
				{//Expression
					uint start520 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start520;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch354;
			}
			{//OptionalExpr
				{//Expression
					uint start522 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start522;
					}
				}
			}
			if(!(parse_FloatParameter().assign!(Parameter)(bind_mult))){
				goto mismatch354;
			}
			{//OptionalExpr
				{//Expression
					uint start524 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start524;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch354;
			}
			goto match353;
		mismatch354:
			{/*do nothing*/}
			position = start518;
			goto mismatch352;
		match353:
			clearErrors();
			goto match351;
		}
	match351:
		debug writefln("parse_SetIngredientMultiplier() PASS");
		auto value = MATCH_SetIngredientMultiplier(bind_mult);
		return ResultT!(int)(value);
	mismatch352:
		position = start517;
		return ResultT!(int)();
	}

	/*
	
ShowInputBox
	= int MATCH_ShowInputBox(Parameter dialogTitle,Parameter buttonText)
	::=  "ShowInputBox" [  WS]  "(" [  WS]  StringParameter:dialogTitle [  WS]  "," [  WS]  StringParameter:buttonText [  WS]  ")";

	*/
	public ResultT!(int) parse_ShowInputBox(){
		debug writefln("parse_ShowInputBox()");
		uint start525 = position;
		Parameter bind_dialogTitle;
		Parameter bind_buttonText;
		
		
		{//Expression
			uint start526 = position;
			if(!(terminal("ShowInputBox").success)){
				goto mismatch358;
			}
			{//OptionalExpr
				{//Expression
					uint start528 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start528;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch358;
			}
			{//OptionalExpr
				{//Expression
					uint start530 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start530;
					}
				}
			}
			if(!(parse_StringParameter().assign!(Parameter)(bind_dialogTitle))){
				goto mismatch358;
			}
			{//OptionalExpr
				{//Expression
					uint start532 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start532;
					}
				}
			}
			if(!(terminal(",").success)){
				goto mismatch358;
			}
			{//OptionalExpr
				{//Expression
					uint start534 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start534;
					}
				}
			}
			if(!(parse_StringParameter().assign!(Parameter)(bind_buttonText))){
				goto mismatch358;
			}
			{//OptionalExpr
				{//Expression
					uint start536 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start536;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch358;
			}
			goto match357;
		mismatch358:
			{/*do nothing*/}
			position = start526;
			goto mismatch356;
		match357:
			clearErrors();
			goto match355;
		}
	match355:
		debug writefln("parse_ShowInputBox() PASS");
		auto value = MATCH_ShowInputBox(bind_dialogTitle,bind_buttonText);
		return ResultT!(int)(value);
	mismatch356:
		position = start525;
		return ResultT!(int)();
	}

	/*
	
CreateWeapon
	= int MATCH_CreateWeapon(Parameter templateAddress)
	::=  "CreateWeapon" [  WS]  "(" [  WS]  LongParameter:templateAddress [  WS]  ")";

	*/
	public ResultT!(int) parse_CreateWeapon(){
		debug writefln("parse_CreateWeapon()");
		uint start537 = position;
		Parameter bind_templateAddress;
		
		
		{//Expression
			uint start538 = position;
			if(!(terminal("CreateWeapon").success)){
				goto mismatch362;
			}
			{//OptionalExpr
				{//Expression
					uint start540 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start540;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch362;
			}
			{//OptionalExpr
				{//Expression
					uint start542 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start542;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_templateAddress))){
				goto mismatch362;
			}
			{//OptionalExpr
				{//Expression
					uint start544 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start544;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch362;
			}
			goto match361;
		mismatch362:
			{/*do nothing*/}
			position = start538;
			goto mismatch360;
		match361:
			clearErrors();
			goto match359;
		}
	match359:
		debug writefln("parse_CreateWeapon() PASS");
		auto value = MATCH_CreateWeapon(bind_templateAddress);
		return ResultT!(int)(value);
	mismatch360:
		position = start537;
		return ResultT!(int)();
	}

	/*
	
CreateArmor
	= int MATCH_CreateArmor(Parameter templateAddress)
	::=  "CreateArmor" [  WS]  "(" [  WS]  LongParameter:templateAddress [  WS]  ")";

	*/
	public ResultT!(int) parse_CreateArmor(){
		debug writefln("parse_CreateArmor()");
		uint start545 = position;
		Parameter bind_templateAddress;
		
		
		{//Expression
			uint start546 = position;
			if(!(terminal("CreateArmor").success)){
				goto mismatch366;
			}
			{//OptionalExpr
				{//Expression
					uint start548 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start548;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch366;
			}
			{//OptionalExpr
				{//Expression
					uint start550 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start550;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_templateAddress))){
				goto mismatch366;
			}
			{//OptionalExpr
				{//Expression
					uint start552 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start552;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch366;
			}
			goto match365;
		mismatch366:
			{/*do nothing*/}
			position = start546;
			goto mismatch364;
		match365:
			clearErrors();
			goto match363;
		}
	match363:
		debug writefln("parse_CreateArmor() PASS");
		auto value = MATCH_CreateArmor(bind_templateAddress);
		return ResultT!(int)(value);
	mismatch364:
		position = start545;
		return ResultT!(int)();
	}

	/*
	
CreateBook
	= int MATCH_CreateBook(Parameter templateAddress)
	::=  "CreateBook" [  WS]  "(" [  WS]  LongParameter:templateAddress [  WS]  ")";

	*/
	public ResultT!(int) parse_CreateBook(){
		debug writefln("parse_CreateBook()");
		uint start553 = position;
		Parameter bind_templateAddress;
		
		
		{//Expression
			uint start554 = position;
			if(!(terminal("CreateBook").success)){
				goto mismatch370;
			}
			{//OptionalExpr
				{//Expression
					uint start556 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start556;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch370;
			}
			{//OptionalExpr
				{//Expression
					uint start558 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start558;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_templateAddress))){
				goto mismatch370;
			}
			{//OptionalExpr
				{//Expression
					uint start560 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start560;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch370;
			}
			goto match369;
		mismatch370:
			{/*do nothing*/}
			position = start554;
			goto mismatch368;
		match369:
			clearErrors();
			goto match367;
		}
	match367:
		debug writefln("parse_CreateBook() PASS");
		auto value = MATCH_CreateBook(bind_templateAddress);
		return ResultT!(int)(value);
	mismatch368:
		position = start553;
		return ResultT!(int)();
	}

	/*
	
CreateClothing
	= int MATCH_CreateClothing(Parameter templateAddress)
	::=  "CreateClothing" [  WS]  "(" [  WS]  LongParameter:templateAddress [  WS]  ")";

	*/
	public ResultT!(int) parse_CreateClothing(){
		debug writefln("parse_CreateClothing()");
		uint start561 = position;
		Parameter bind_templateAddress;
		
		
		{//Expression
			uint start562 = position;
			if(!(terminal("CreateClothing").success)){
				goto mismatch374;
			}
			{//OptionalExpr
				{//Expression
					uint start564 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start564;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch374;
			}
			{//OptionalExpr
				{//Expression
					uint start566 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start566;
					}
				}
			}
			if(!(parse_LongParameter().assign!(Parameter)(bind_templateAddress))){
				goto mismatch374;
			}
			{//OptionalExpr
				{//Expression
					uint start568 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start568;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch374;
			}
			goto match373;
		mismatch374:
			{/*do nothing*/}
			position = start562;
			goto mismatch372;
		match373:
			clearErrors();
			goto match371;
		}
	match371:
		debug writefln("parse_CreateClothing() PASS");
		auto value = MATCH_CreateClothing(bind_templateAddress);
		return ResultT!(int)(value);
	mismatch372:
		position = start561;
		return ResultT!(int)();
	}

	/*
	
GetTemplate
	= int MATCH_GetTemplate(Parameter templateString)
	::=  "GetTemplate" [  WS]  "(" [  WS]  StringParameter:templateString [  WS]  ")";

	*/
	public ResultT!(int) parse_GetTemplate(){
		debug writefln("parse_GetTemplate()");
		uint start569 = position;
		Parameter bind_templateString;
		
		
		{//Expression
			uint start570 = position;
			if(!(terminal("GetTemplate").success)){
				goto mismatch378;
			}
			{//OptionalExpr
				{//Expression
					uint start572 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start572;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch378;
			}
			{//OptionalExpr
				{//Expression
					uint start574 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start574;
					}
				}
			}
			if(!(parse_StringParameter().assign!(Parameter)(bind_templateString))){
				goto mismatch378;
			}
			{//OptionalExpr
				{//Expression
					uint start576 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start576;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch378;
			}
			goto match377;
		mismatch378:
			{/*do nothing*/}
			position = start570;
			goto mismatch376;
		match377:
			clearErrors();
			goto match375;
		}
	match375:
		debug writefln("parse_GetTemplate() PASS");
		auto value = MATCH_GetTemplate(bind_templateString);
		return ResultT!(int)(value);
	mismatch376:
		position = start569;
		return ResultT!(int)();
	}

	/*
	
DisplayMessage
	= int MATCH_DisplayMessage(Parameter message)
	::=  "DisplayMessage" [  WS]  "(" [  WS]  StringParameter:message [  WS]  ")";

	*/
	public ResultT!(int) parse_DisplayMessage(){
		debug writefln("parse_DisplayMessage()");
		uint start577 = position;
		Parameter bind_message;
		
		
		{//Expression
			uint start578 = position;
			if(!(terminal("DisplayMessage").success)){
				goto mismatch382;
			}
			{//OptionalExpr
				{//Expression
					uint start580 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start580;
					}
				}
			}
			if(!(terminal("(").success)){
				goto mismatch382;
			}
			{//OptionalExpr
				{//Expression
					uint start582 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start582;
					}
				}
			}
			if(!(parse_StringParameter().assign!(Parameter)(bind_message))){
				goto mismatch382;
			}
			{//OptionalExpr
				{//Expression
					uint start584 = position;
					if((parse_WS().success)){
						clearErrors();
					}else{
						position = start584;
					}
				}
			}
			if(!(terminal(")").success)){
				goto mismatch382;
			}
			goto match381;
		mismatch382:
			{/*do nothing*/}
			position = start578;
			goto mismatch380;
		match381:
			clearErrors();
			goto match379;
		}
	match379:
		debug writefln("parse_DisplayMessage() PASS");
		auto value = MATCH_DisplayMessage(bind_message);
		return ResultT!(int)(value);
	mismatch380:
		position = start577;
		return ResultT!(int)();
	}

}
